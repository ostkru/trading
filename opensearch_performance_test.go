package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"sort"
	"time"
)

// TestResult –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
type TestResult struct {
	Query     string        `json:"query"`
	Duration  time.Duration `json:"duration_ms"`
	Hits      int           `json:"hits"`
	Error     string        `json:"error,omitempty"`
}

// PerformanceTest –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤
type PerformanceTest struct {
	BaseURL string
	Tests   []TestResult
}

// NewPerformanceTest —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
func NewPerformanceTest(baseURL string) *PerformanceTest {
	return &PerformanceTest{
		BaseURL: baseURL,
		Tests:   make([]TestResult, 0),
	}
}

// RunTest –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —Ç–µ—Å—Ç
func (pt *PerformanceTest) RunTest(query, endpoint string) TestResult {
	start := time.Now()
	
	// –§–æ—Ä–º–∏—Ä—É–µ–º URL
	url := fmt.Sprintf("%s/api/opensearch/?%s", pt.BaseURL, query)
	
	// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := http.Get(url)
	if err != nil {
		return TestResult{
			Query:    query,
			Duration: time.Since(start),
			Error:    err.Error(),
		}
	}
	defer resp.Body.Close()
	
	// –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return TestResult{
			Query:    query,
			Duration: time.Since(start),
			Error:    err.Error(),
		}
	}
	
	// –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
	var result map[string]interface{}
	if err := json.Unmarshal(body, &result); err != nil {
		return TestResult{
			Query:    query,
			Duration: time.Since(start),
			Error:    err.Error(),
		}
	}
	
	// –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	hits := 0
	if hitsData, ok := result["hits"].(map[string]interface{}); ok {
		if totalData, ok := hitsData["total"].(map[string]interface{}); ok {
			if value, ok := totalData["value"].(float64); ok {
				hits = int(value)
			}
		}
	}
	
	return TestResult{
		Query:    query,
		Duration: time.Since(start),
		Hits:     hits,
	}
}

// RunMultipleTests –≤—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤
func (pt *PerformanceTest) RunMultipleTests(query string, iterations int) []TestResult {
	results := make([]TestResult, 0, iterations)
	
	for i := 0; i < iterations; i++ {
		result := pt.RunTest(query, "/api/search/")
		results = append(results, result)
		
		// –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
		time.Sleep(100 * time.Millisecond)
	}
	
	return results
}

// RunComprehensiveTest –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
func (pt *PerformanceTest) RunComprehensiveTest() {
	fmt.Println("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Go API")
	fmt.Println("=" * 60)
	
	// –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
	testQueries := []string{
		"query=–¥—Ä–µ–ª—å&size=10",
		"query=—Å–≤–∞—Ä–æ—á–Ω—ã–π&size=20",
		"query=–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç&size=50",
		"brand=DeWalt&size=30",
		"brand=Bosch&size=40",
		"category=—ç–ª–µ–∫—Ç—Ä–æ–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç&size=25",
		"price_min=1000&price_max=5000&size=15",
		"query=–ø–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä&brand=Makita&size=20",
		"query=–±–æ–ª–≥–∞—Ä–∫–∞&price_min=2000&size=30",
		"query=–æ—Ç–≤–µ—Ä—Ç–∫–∞&size=100",
	}
	
	// –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
	allResults := make([]TestResult, 0)
	
	for i, query := range testQueries {
		fmt.Printf("–¢–µ—Å—Ç %d/%d: %s\n", i+1, len(testQueries), query)
		
		// –í—ã–ø–æ–ª–Ω—è–µ–º 5 –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
		results := pt.RunMultipleTests(query, 5)
		allResults = append(allResults, results...)
		
		// –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
		pt.printQueryStats(query, results)
		fmt.Println()
	}
	
	// –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
	pt.printOverallStats(allResults)
}

// printQueryStats –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
func (pt *PerformanceTest) printQueryStats(query string, results []TestResult) {
	if len(results) == 0 {
		fmt.Printf("  ‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: %s\n", query)
		return
	}
	
	// –§–∏–ª—å—Ç—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	successResults := make([]TestResult, 0)
	for _, result := range results {
		if result.Error == "" {
			successResults = append(successResults, result)
		}
	}
	
	if len(successResults) == 0 {
		fmt.Printf("  ‚ùå –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π\n")
		return
	}
	
	// –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	durations := make([]time.Duration, len(successResults))
	for i, result := range successResults {
		durations[i] = result.Duration
	}
	
	sort.Slice(durations, func(i, j int) bool {
		return durations[i] < durations[j]
	})
	
	avg := time.Duration(0)
	for _, d := range durations {
		avg += d
	}
	avg = avg / time.Duration(len(durations))
	
	min := durations[0]
	max := durations[len(durations)-1]
	median := durations[len(durations)/2]
	
	fmt.Printf("  ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: %d/%d\n", len(successResults), len(results))
	fmt.Printf("  ‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: %v\n", avg)
	fmt.Printf("  ‚è±Ô∏è  –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: %v\n", min)
	fmt.Printf("  ‚è±Ô∏è  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: %v\n", max)
	fmt.Printf("  ‚è±Ô∏è  –ú–µ–¥–∏–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: %v\n", median)
	fmt.Printf("  üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: %d\n", successResults[0].Hits)
}

// printOverallStats –≤—ã–≤–æ–¥–∏—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
func (pt *PerformanceTest) printOverallStats(results []TestResult) {
	if len(results) == 0 {
		fmt.Println("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
		return
	}
	
	// –§–∏–ª—å—Ç—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	successResults := make([]TestResult, 0)
	for _, result := range results {
		if result.Error == "" {
			successResults = append(successResults, result)
		}
	}
	
	if len(successResults) == 0 {
		fmt.Println("‚ùå –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π")
		return
	}
	
	// –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	durations := make([]time.Duration, len(successResults))
	for i, result := range successResults {
		durations[i] = result.Duration
	}
	
	sort.Slice(durations, func(i, j int) bool {
		return durations[i] < durations[j]
	})
	
	avg := time.Duration(0)
	for _, d := range durations {
		avg += d
	}
	avg = avg / time.Duration(len(durations))
	
	min := durations[0]
	max := durations[len(durations)-1]
	median := durations[len(durations)/2]
	
	fmt.Println("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê GO API")
	fmt.Println("=" * 40)
	fmt.Printf("‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: %d/%d (%.1f%%)\n", 
		len(successResults), len(results), 
		float64(len(successResults))/float64(len(results))*100)
	fmt.Printf("‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: %v\n", avg)
	fmt.Printf("‚è±Ô∏è  –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: %v\n", min)
	fmt.Printf("‚è±Ô∏è  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: %v\n", max)
	fmt.Printf("‚è±Ô∏è  –ú–µ–¥–∏–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: %v\n", median)
	fmt.Printf("üöÄ –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: %.1f\n", 
		float64(len(successResults))/avg.Seconds())
}

func main() {
	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
	baseURL := "http://localhost:8095"
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
	fmt.Println("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Go API...")
	resp, err := http.Get(baseURL + "/api/opensearch/health")
	if err != nil {
		log.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Go API: %v", err)
	}
	defer resp.Body.Close()
	
	if resp.StatusCode != 200 {
		log.Fatalf("‚ùå Go API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ç–∞—Ç—É—Å: %d", resp.StatusCode)
	}
	
	fmt.Println("‚úÖ Go API –¥–æ—Å—Ç—É–ø–µ–Ω")
	fmt.Println()
	
	// –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
	test := NewPerformanceTest(baseURL)
	test.RunComprehensiveTest()
	
	fmt.Println()
	fmt.Println("üéØ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
}
