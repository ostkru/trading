<?php
/**
 * –¢–ï–°–¢ –ú–ï–î–ò–ê –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É —Å –º–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 */

class MediaFunctionalityTest {
    private $baseUrl = 'http://localhost:8095/api/v1';
    private $apiKey = '026b26ac7a206c51a216b3280042cda5178710912da68ae696a713970034dd5f';
    private $testResults = [];
    private $createdProductId = null;

    public function run() {
        echo "üé¨ –¢–ï–°–¢ –ú–ï–î–ò–ê –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò\n";
        echo "================================\n";
        echo "–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: " . date('Y-m-d H:i:s') . "\n\n";

        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –º–µ–¥–∏–∞
        $this->testCreateProductWithMedia();
        
        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –º–µ–¥–∏–∞
        $this->testGetProductWithMedia();
        
        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞
        $this->testUpdateProductMedia();
        
        // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å –º–µ–¥–∏–∞
        $this->testBatchCreateWithMedia();
        
        // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–µ–¥–∏–∞
        $this->testMediaValidation();
        
        // 6. –û—á–∏—Å—Ç–∫–∞
        $this->cleanup();
        
        // 7. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        $this->printResults();
    }

    private function testCreateProductWithMedia() {
        echo "üì∏ 1. –°–û–ó–î–ê–ù–ò–ï –ü–†–û–î–£–ö–¢–ê –° –ú–ï–î–ò–ê\n";
        echo "----------------------------------\n";
        
        $productData = [
            'name' => '–°–º–∞—Ä—Ç—Ñ–æ–Ω —Å –º–µ–¥–∏–∞ ' . time(),
            'vendor_article' => 'MEDIA-SMART-' . time(),
            'recommend_price' => 45000.00,
            'brand' => 'Samsung',
            'category' => '–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã',
            'description' => '–°–º–∞—Ä—Ç—Ñ–æ–Ω —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –º–µ–¥–∏–∞',
            'image_urls' => [
                'https://example.com/smart_front.jpg',
                'https://example.com/smart_back.jpg',
                'https://example.com/smart_side.jpg'
            ],
            'video_urls' => [
                'https://example.com/smart_review.mp4',
                'https://example.com/smart_unboxing.mp4'
            ],
            'model_3d_urls' => [
                'https://example.com/smart_3d.glb',
                'https://example.com/smart_3d.obj'
            ]
        ];
        
        $response = $this->makeRequest('POST', '/products', $productData);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø–æ–ª–Ω—ã–º –º–µ–¥–∏–∞', $response['status'] === 201, $response);
        
        if ($response['status'] === 201) {
            $this->createdProductId = $response['data']['id'];
            echo "   ‚úÖ –ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {$this->createdProductId}\n";
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞ –≤ –æ—Ç–≤–µ—Ç–µ
            if (isset($response['data']['media'])) {
                echo "   ‚úÖ –ú–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã–µ –≤–∫–ª—é—á–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç\n";
                $media = $response['data']['media'];
                echo "   üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: " . count($media['image_urls'] ?? []) . "\n";
                echo "   üé• –í–∏–¥–µ–æ: " . count($media['video_urls'] ?? []) . "\n";
                echo "   üéÆ 3D –º–æ–¥–µ–ª–µ–π: " . count($media['model_3d_urls'] ?? []) . "\n";
            } else {
                echo "   ‚ö†Ô∏è –ú–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ—Ç–≤–µ—Ç–µ\n";
            }
        }
        
        echo "\n";
    }

    private function testGetProductWithMedia() {
        echo "üì∏ 2. –ü–û–õ–£–ß–ï–ù–ò–ï –ü–†–û–î–£–ö–¢–ê –° –ú–ï–î–ò–ê\n";
        echo "-----------------------------------\n";
        
        if (!$this->createdProductId) {
            echo "   ‚ö†Ô∏è –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n\n";
            return;
        }
        
        $response = $this->makeRequest('GET', '/products/' . $this->createdProductId);
        $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –º–µ–¥–∏–∞', $response['status'] === 200, $response);
        
        if ($response['status'] === 200) {
            if (isset($response['data']['media'])) {
                echo "   ‚úÖ –ú–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã\n";
                $media = $response['data']['media'];
                echo "   üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: " . count($media['image_urls'] ?? []) . "\n";
                echo "   üé• –í–∏–¥–µ–æ: " . count($media['video_urls'] ?? []) . "\n";
                echo "   üéÆ 3D –º–æ–¥–µ–ª–µ–π: " . count($media['model_3d_urls'] ?? []) . "\n";
            } else {
                echo "   ‚ö†Ô∏è –ú–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n";
            }
        }
        
        echo "\n";
    }

    private function testUpdateProductMedia() {
        echo "üì∏ 3. –û–ë–ù–û–í–õ–ï–ù–ò–ï –ú–ï–î–ò–ê –ü–†–û–î–£–ö–¢–ê\n";
        echo "----------------------------------\n";
        
        if (!$this->createdProductId) {
            echo "   ‚ö†Ô∏è –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n\n";
            return;
        }
        
        $updateData = [
            'image_urls' => [
                'https://example.com/updated_front.jpg',
                'https://example.com/updated_back.jpg'
            ],
            'video_urls' => [
                'https://example.com/updated_review.mp4'
            ],
            'model_3d_urls' => [
                'https://example.com/updated_3d.glb'
            ]
        ];
        
        $response = $this->makeRequest('PUT', '/products/' . $this->createdProductId, $updateData);
        $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞ –ø—Ä–æ–¥—É–∫—Ç–∞', $response['status'] === 200, $response);
        
        if ($response['status'] === 200) {
            if (isset($response['data']['media'])) {
                echo "   ‚úÖ –ú–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã\n";
                $media = $response['data']['media'];
                echo "   üì∏ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: " . count($media['image_urls'] ?? []) . "\n";
                echo "   üé• –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ: " . count($media['video_urls'] ?? []) . "\n";
                echo "   üéÆ –û–±–Ω–æ–≤–ª–µ–Ω–æ 3D –º–æ–¥–µ–ª–µ–π: " . count($media['model_3d_urls'] ?? []) . "\n";
            } else {
                echo "   ‚ö†Ô∏è –ú–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ—Ç–≤–µ—Ç–µ\n";
            }
        }
        
        echo "\n";
    }

    private function testBatchCreateWithMedia() {
        echo "üì∏ 4. –ü–ê–ö–ï–¢–ù–û–ï –°–û–ó–î–ê–ù–ò–ï –° –ú–ï–î–ò–ê\n";
        echo "----------------------------------\n";
        
        $batchData = [
            'products' => [
                [
                    'name' => '–ü–∞–∫–µ—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å –º–µ–¥–∏–∞ 1',
                    'vendor_article' => 'BATCH-MEDIA-1-' . time(),
                    'recommend_price' => 1000.00,
                    'brand' => 'BatchMediaBrand',
                    'category' => 'BatchMediaCategory',
                    'description' => '–ü–∞–∫–µ—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å –º–µ–¥–∏–∞ 1',
                    'image_urls' => [
                        'https://example.com/batch1_image1.jpg',
                        'https://example.com/batch1_image2.jpg'
                    ],
                    'video_urls' => [
                        'https://example.com/batch1_video.mp4'
                    ]
                ],
                [
                    'name' => '–ü–∞–∫–µ—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å –º–µ–¥–∏–∞ 2',
                    'vendor_article' => 'BATCH-MEDIA-2-' . time(),
                    'recommend_price' => 2000.00,
                    'brand' => 'BatchMediaBrand',
                    'category' => 'BatchMediaCategory',
                    'description' => '–ü–∞–∫–µ—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å –º–µ–¥–∏–∞ 2',
                    'image_urls' => [
                        'https://example.com/batch2_image1.jpg'
                    ],
                    'model_3d_urls' => [
                        'https://example.com/batch2_3d.glb'
                    ]
                ]
            ]
        ];
        
        $response = $this->makeRequest('POST', '/products/batch', $batchData);
        $this->assertTest('–ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å –º–µ–¥–∏–∞', $response['status'] === 201, $response);
        
        if ($response['status'] === 201) {
            echo "   ‚úÖ –ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n";
            if (isset($response['data']['products'])) {
                $productsWithMedia = 0;
                foreach ($response['data']['products'] as $product) {
                    if (isset($product['media'])) {
                        $productsWithMedia++;
                    }
                }
                echo "   üì¶ –ü—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –º–µ–¥–∏–∞: $productsWithMedia\n";
            }
        }
        
        echo "\n";
    }

    private function testMediaValidation() {
        echo "üì∏ 5. –í–ê–õ–ò–î–ê–¶–ò–Ø –ú–ï–î–ò–ê –î–ê–ù–ù–´–•\n";
        echo "------------------------------\n";
        
        // –¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ URL
        $invalidData = [
            'name' => '–ü—Ä–æ–¥—É–∫—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ URL',
            'vendor_article' => 'INVALID-URL-' . time(),
            'recommend_price' => 500.00,
            'brand' => 'TestBrand',
            'category' => 'TestCategory',
            'description' => '–ü—Ä–æ–¥—É–∫—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ URL',
            'image_urls' => [
                'not_a_valid_url',
                'ftp://invalid-protocol.com/image.jpg'
            ]
        ];
        
        $response = $this->makeRequest('POST', '/products', $invalidData);
        $this->assertTest('–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–≤–µ—Ä–Ω—ã—Ö URL', $response['status'] === 400, $response);
        
        // –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º–∏ –º–∞—Å—Å–∏–≤–∞–º–∏ –º–µ–¥–∏–∞
        $emptyMediaData = [
            'name' => '–ü—Ä–æ–¥—É–∫—Ç —Å –ø—É—Å—Ç—ã–º–∏ –º–µ–¥–∏–∞',
            'vendor_article' => 'EMPTY-MEDIA-' . time(),
            'recommend_price' => 300.00,
            'brand' => 'TestBrand',
            'category' => 'TestCategory',
            'description' => '–ü—Ä–æ–¥—É–∫—Ç —Å –ø—É—Å—Ç—ã–º–∏ –º–µ–¥–∏–∞',
            'image_urls' => [],
            'video_urls' => [],
            'model_3d_urls' => []
        ];
        
        $response = $this->makeRequest('POST', '/products', $emptyMediaData);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ —Å –ø—É—Å—Ç—ã–º–∏ –º–µ–¥–∏–∞', $response['status'] === 201, $response);
        
        echo "\n";
    }

    private function cleanup() {
        echo "üßπ 6. –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•\n";
        echo "--------------------------------\n";
        
        if ($this->createdProductId) {
            $response = $this->makeRequest('DELETE', '/products/' . $this->createdProductId);
            $this->assertTest('–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞', $response['status'] === 200, $response);
        }
        
        echo "\n";
    }

    private function makeRequest($method, $endpoint, $data = null) {
        $url = $this->baseUrl . $endpoint;
        
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_TIMEOUT, 10);
        curl_setopt($ch, CURLOPT_HTTPHEADER, [
            'Authorization: Bearer ' . $this->apiKey,
            'Content-Type: application/json'
        ]);
        
        if ($method === 'POST') {
            curl_setopt($ch, CURLOPT_POST, true);
            if ($data) {
                curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
            }
        } elseif ($method === 'PUT') {
            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');
            if ($data) {
                curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
            }
        } elseif ($method === 'DELETE') {
            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
        }
        
        $response = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);
        
        return [
            'status' => $httpCode,
            'data' => json_decode($response, true),
            'raw' => $response
        ];
    }

    private function assertTest($testName, $condition, $response) {
        $status = $condition ? '‚úÖ' : '‚ùå';
        echo "$status $testName\n";
        
        if (!$condition) {
            echo "   –û—à–∏–±–∫–∞: " . ($response['raw'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') . "\n";
        }
        
        $this->testResults[] = [
            'name' => $testName,
            'passed' => $condition,
            'response' => $response
        ];
    }

    private function printResults() {
        echo "üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê –ú–ï–î–ò–ê –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò\n";
        echo "==========================================\n";
        
        $passed = 0;
        $total = count($this->testResults);
        
        foreach ($this->testResults as $result) {
            if ($result['passed']) {
                $passed++;
            }
        }
        
        $successRate = round(($passed / $total) * 100, 2);
        
        echo "–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: $total\n";
        echo "–ü—Ä–æ–π–¥–µ–Ω–æ: $passed\n";
        echo "–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: " . ($total - $passed) . "\n";
        echo "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {$successRate}%\n\n";
        
        echo "üéØ –°–¢–ê–¢–£–° –ú–ï–î–ò–ê –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò:\n";
        if ($successRate >= 80) {
            echo "üü¢ –û–¢–õ–ò–ß–ù–û - –ú–µ–¥–∏–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç\n";
        } elseif ($successRate >= 60) {
            echo "üü° –•–û–†–û–®–û - –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –º–µ–¥–∏–∞\n";
        } else {
            echo "üî¥ –ü–õ–û–•–û - –ú–µ–¥–∏–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\n";
        }
        
        echo "\nüìù –í–´–í–û–î–´:\n";
        if ($successRate >= 80) {
            echo "‚úÖ –ú–µ–¥–∏–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç\n";
            echo "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –º–µ–¥–∏–∞\n";
            echo "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞\n";
            echo "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ø–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å –º–µ–¥–∏–∞\n";
        } else {
            echo "‚ùå –ú–µ–¥–∏–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –∏–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n";
            echo "‚ùå –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –º–µ–¥–∏–∞ –≤ –∫–æ–¥–µ\n";
        }
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
$test = new MediaFunctionalityTest();
$test->run();
?> 