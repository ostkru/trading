package classifier

import (
	"database/sql"
	"fmt"
	"log"
	"strconv"
)

// Cache –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
type Cache interface {
	Delete(key string) error
}

// ProductResultHandler –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
type ProductResultHandler struct {
	db    *sql.DB
	cache Cache
}

// NewProductResultHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
func NewProductResultHandler(db *sql.DB) *ProductResultHandler {
	return &ProductResultHandler{
		db:    db,
		cache: nil, // –ö—ç—à –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–∑–∂–µ
	}
}

// HandleClassificationResult –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
// –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞ 'classified' —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å >= 0.99 –∏ ID —á–∏—Å–ª–æ–≤—ã–µ
func (h *ProductResultHandler) HandleClassificationResult(productID int64, result *ClassificationResult) error {
	log.Printf("üîç –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ %d", productID)
	log.Printf("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: Status=%s, Accuracy=%.2f, BrandAccuracy=%.2f", result.Status, result.Accuracy, result.BrandAccuracy)
	log.Printf("üìä FoundCategoryID: %v (—Ç–∏–ø: %T)", result.FoundCategoryID, result.FoundCategoryID)
	log.Printf("üìä FoundBrandID: %v (—Ç–∏–ø: %T)", result.FoundBrandID, result.FoundBrandID)

	if result.Status != "found" {
		log.Printf("‚ö†Ô∏è –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ %d –Ω–µ —É–¥–∞–ª–∞—Å—å: —Å—Ç–∞—Ç—É—Å=%s", productID, result.Status)
		return nil
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
	var categoryID, brandID *int64

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å >= 0.99 –∏ ID —á–∏—Å–ª–æ–≤–æ–π)
	if result.FoundCategoryID != nil && result.Accuracy >= 0.99 {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - —ç—Ç–æ —á–∏—Å–ª–æ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å —á–∏—Å–ª–æ–º
		switch v := result.FoundCategoryID.(type) {
		case float64:
			// JSON —á–∏—Å–ª–∞ –ø–∞—Ä—Å—è—Ç—Å—è –∫–∞–∫ float64
			catID := int64(v)
			categoryID = &catID
			log.Printf("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ %d –Ω–∞–π–¥–µ–Ω–∞ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é %.2f (ID: %d)",
				productID, result.Accuracy, catID)
		case string:
			// API –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–∫—É —Å —á–∏—Å–ª–æ–º - –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å
			if catID, err := strconv.ParseInt(v, 10, 64); err == nil {
				categoryID = &catID
				log.Printf("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ %d –Ω–∞–π–¥–µ–Ω–∞ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é %.2f (ID: %d, –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –∏–∑ —Å—Ç—Ä–æ–∫–∏)",
					productID, result.Accuracy, catID)
			} else {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ API: found_category_id –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: %s", v)
				// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å not_classified
				if err := h.setProductNotClassified(productID); err != nil {
					log.Printf("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ not_classified –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ %d: %v", productID, err)
				}
				return nil
			}
		default:
			log.Printf("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø found_category_id: %T", result.FoundCategoryID)
			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å not_classified
			if err := h.setProductNotClassified(productID); err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ not_classified –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ %d: %v", productID, err)
			}
			return nil
		}
	} else if result.FoundCategoryID != nil {
		log.Printf("‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ %d –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å %.2f < 0.99",
			productID, result.Accuracy)
	} else {
		log.Printf("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ %d –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", productID)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—Ä–µ–Ω–¥ (–µ—Å–ª–∏ –µ—Å—Ç—å)
	if result.FoundBrandID != nil && result.BrandAccuracy >= 0.99 {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –±—Ä–µ–Ω–¥–∞ - —ç—Ç–æ —á–∏—Å–ª–æ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å —á–∏—Å–ª–æ–º
		switch v := result.FoundBrandID.(type) {
		case float64:
			// JSON —á–∏—Å–ª–∞ –ø–∞—Ä—Å—è—Ç—Å—è –∫–∞–∫ float64
			brID := int64(v)
			brandID = &brID
			log.Printf("‚úÖ –ë—Ä–µ–Ω–¥ –ø—Ä–æ–¥—É–∫—Ç–∞ %d –Ω–∞–π–¥–µ–Ω —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é %.2f (ID: %d)",
				productID, result.BrandAccuracy, brID)
		case string:
			// API –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–∫—É —Å —á–∏—Å–ª–æ–º - –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å
			if brID, err := strconv.ParseInt(v, 10, 64); err == nil {
				brandID = &brID
				log.Printf("‚úÖ –ë—Ä–µ–Ω–¥ –ø—Ä–æ–¥—É–∫—Ç–∞ %d –Ω–∞–π–¥–µ–Ω —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é %.2f (ID: %d, –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –∏–∑ —Å—Ç—Ä–æ–∫–∏)",
					productID, result.BrandAccuracy, brID)
			} else {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ API: brand_id –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: %s", v)
				// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å not_classified
				if err := h.setProductNotClassified(productID); err != nil {
					log.Printf("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ not_classified –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ %d: %v", productID, err)
				}
				return nil
			}
		default:
			log.Printf("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø brand_id: %T", result.FoundBrandID)
			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å not_classified
			if err := h.setProductNotClassified(productID); err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ not_classified –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ %d: %v", productID, err)
			}
			return nil
		}
	} else if result.FoundBrandID != nil {
		log.Printf("‚ö†Ô∏è –ë—Ä–µ–Ω–¥ –ø—Ä–æ–¥—É–∫—Ç–∞ %d –Ω–∞–π–¥–µ–Ω, –Ω–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å %.2f < 0.99",
			productID, result.Accuracy)
	} else {
		log.Printf("‚ùå –ë—Ä–µ–Ω–¥ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ %d –Ω–µ –Ω–∞–π–¥–µ–Ω", productID)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –û–ë–ê ID –Ω–∞–π–¥–µ–Ω—ã —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é >= 0.99 (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!)
	log.Printf("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç: categoryID=%v, brandID=%v", categoryID, brandID)

	if categoryID != nil && brandID != nil {
		// –û–±–∞ ID –Ω–∞–π–¥–µ–Ω—ã - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å classified
		log.Printf("üéØ –û–±–∞ ID –Ω–∞–π–¥–µ–Ω—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å—Ç–∞—Ç—É—Å classified –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ %d", productID)
		if err := h.updateProductClassification(productID, categoryID, brandID); err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ %d: %v", productID, err)
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ %d: %w", productID, err)
		}
		log.Printf("üéØ –ü—Ä–æ–¥—É–∫—Ç %d —É—Å–ø–µ—à–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω (category_id=%d, brand_id=%d)",
			productID, *categoryID, *brandID)
	} else {
		// –ù–µ –≤—Å–µ ID –Ω–∞–π–¥–µ–Ω—ã - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å not_classified
		log.Printf("‚è≥ –ü—Ä–æ–¥—É–∫—Ç %d –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–µ–∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º (–Ω–µ –≤—Å–µ ID –Ω–∞–π–¥–µ–Ω—ã)", productID)
		if categoryID == nil {
			log.Printf("   - categoryID –Ω–µ –Ω–∞–π–¥–µ–Ω")
		}
		if brandID == nil {
			log.Printf("   - brandID –Ω–µ –Ω–∞–π–¥–µ–Ω")
		}
		if err := h.setProductNotClassified(productID); err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ not_classified –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ %d: %v", productID, err)
		}
	}

	log.Printf("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ %d –∑–∞–≤–µ—Ä—à–µ–Ω–∞", productID)
	return nil
}

// setProductNotClassified —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞ –∫–∞–∫ not_classified
func (h *ProductResultHandler) setProductNotClassified(productID int64) error {
	// –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	tx, err := h.db.Begin()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %w", err)
	}
	defer tx.Rollback()

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ not_classified
	query := "UPDATE products SET status = 'not_classified', updated_at = NOW() WHERE id = ?"
	result, err := tx.Exec(query, productID)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è UPDATE: %w", err)
	}

	rowsAffected, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫: %w", err)
	}

	if rowsAffected == 0 {
		return fmt.Errorf("–ø—Ä–æ–¥—É–∫—Ç —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω", productID)
	}

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	if err := tx.Commit(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %w", err)
	}

	log.Printf("‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç %d —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ not_classified (–æ—à–∏–±–∫–∞ API)", productID)
	return nil
}

// updateProductClassification –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
func (h *ProductResultHandler) updateProductClassification(productID int64, categoryID, brandID *int64) error {
	// –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	tx, err := h.db.Begin()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %w", err)
	}
	defer tx.Rollback()

	// –§–æ—Ä–º–∏—Ä—É–µ–º SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	query := "UPDATE products SET status = 'classified'"
	var args []interface{}
	var placeholders []string

	// –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ category_id –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω
	if categoryID != nil {
		placeholders = append(placeholders, "category_id = ?")
		args = append(args, *categoryID)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ brand_id –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω
	if brandID != nil {
		placeholders = append(placeholders, "brand_id = ?")
		args = append(args, *brandID)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º updated_at
	placeholders = append(placeholders, "updated_at = NOW()")

	// –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å
	if len(placeholders) > 0 {
		query += ", " + placeholders[0]
		for i := 1; i < len(placeholders); i++ {
			query += ", " + placeholders[i]
		}
	}

	query += " WHERE id = ?"
	args = append(args, productID)

	// –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
	result, err := tx.Exec(query, args...)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è UPDATE: %w", err)
	}

	rowsAffected, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫: %w", err)
	}

	if rowsAffected == 0 {
		return fmt.Errorf("–ø—Ä–æ–¥—É–∫—Ç —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω", productID)
	}

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	if err := tx.Commit(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %w", err)
	}

	log.Printf("‚úÖ –ü—Ä–æ–¥—É–∫—Ç %d –æ–±–Ω–æ–≤–ª–µ–Ω: category_id=%v, brand_id=%v, status=classified",
		productID, categoryID, brandID)

	// –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
	if h.cache != nil {
		cacheKey := fmt.Sprintf("product:%d", productID)
		if err := h.cache.Delete(cacheKey); err != nil {
			log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ %d: %v", productID, err)
		} else {
			log.Printf("üóëÔ∏è –ö—ç—à –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ %d –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω", productID)
		}
	}

	return nil
}
