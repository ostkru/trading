package classifier

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"net/url"
	"strconv"
	"time"
)

// ProductClassificationRequest –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞
type ProductClassificationRequest struct {
	ProductID    int64  `json:"product_id"`
	ProductName  string `json:"product_name"`
	UserCategory string `json:"user_category"`
	UserID       int64  `json:"user_id"`
	Brand        string `json:"brand"`
	Category     string `json:"category"`
}

// ClassificationResult —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç API catformat
type ClassificationResult struct {
	Status          string      `json:"status,omitempty"`
	Request         string      `json:"request,omitempty"`
	FoundCategory   string      `json:"found_category,omitempty"`
	FoundCategoryID interface{} `json:"found_category_id,omitempty"` // –ú–æ–∂–µ—Ç –±—ã—Ç—å string –∏–ª–∏ number
	FoundBrand      string      `json:"found_brand,omitempty"`
	FoundBrandID    interface{} `json:"brand_id,omitempty"` // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç brand_id, –∞ –Ω–µ found_brand_id
	Accuracy        float64     `json:"accuracy,omitempty"`
	BrandAccuracy   float64     `json:"brand_accuracy,omitempty"` // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç brand_accuracy
	UserCategory    string      `json:"user_category,omitempty"`
	User            string      `json:"user,omitempty"`
	Error           string      `json:"error,omitempty"`
}

// ProductClassifier –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
type ProductClassifier interface {
	ClassifyProduct(ctx context.Context, req ProductClassificationRequest) (*ClassificationResult, error)
	ClassifyProductAsync(req ProductClassificationRequest) error
}

// OSTKClassifier —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ API OSTK
type OSTKClassifier struct {
	apiBaseURL string
	httpClient *http.Client
	// –ö–∞–Ω–∞–ª –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
	classificationQueue chan ProductClassificationRequest
	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	resultHandler ResultHandler
}

// ResultHandler –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
type ResultHandler interface {
	HandleClassificationResult(productID int64, result *ClassificationResult) error
}

// NewOSTKClassifier —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä OSTK
func NewOSTKClassifier(apiBaseURL string, resultHandler ResultHandler) *OSTKClassifier {
	classifier := &OSTKClassifier{
		apiBaseURL: apiBaseURL,
		httpClient: &http.Client{
			Timeout: 30 * time.Second,
		},
		classificationQueue: make(chan ProductClassificationRequest, 1000), // –ë—É—Ñ–µ—Ä –Ω–∞ 1000 –∑–∞–¥–∞—á
		resultHandler:       resultHandler,
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏
	go classifier.startWorker()

	return classifier
}

// ClassifyProductAsync –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
func (c *OSTKClassifier) ClassifyProductAsync(req ProductClassificationRequest) error {
	select {
	case c.classificationQueue <- req:
		log.Printf("‚úÖ –ó–∞–¥–∞—á–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ %d", req.ProductID)
		return nil
	default:
		return fmt.Errorf("–æ—á–µ—Ä–µ–¥—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞")
	}
}

// startWorker –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
func (c *OSTKClassifier) startWorker() {
	log.Printf("üöÄ –í–æ—Ä–∫–µ—Ä –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω")

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞
	workerCtx, workerCancel := context.WithCancel(context.Background())
	defer workerCancel()

	for {
		select {
		case req, ok := <-c.classificationQueue:
			if !ok {
				log.Printf("üîí –û—á–µ—Ä–µ–¥—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–∞, –∑–∞–≤–µ—Ä—à–∞—é –≤–æ—Ä–∫–µ—Ä")
				return
			}

			log.Printf("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞ %d: %s", req.ProductID, req.ProductName)

			// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
			ctx, cancel := context.WithTimeout(workerCtx, 30*time.Second)

			// –í—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é
			result, err := c.ClassifyProduct(ctx, req)
			if err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ %d: %v", req.ProductID, err)
				cancel()
				continue
			}

			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
			if err := c.resultHandler.HandleClassificationResult(req.ProductID, result); err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ %d: %v", req.ProductID, err)
			}

			cancel() // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

			// –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
			time.Sleep(100 * time.Millisecond)

		case <-workerCtx.Done():
			log.Printf("üîí –í–æ—Ä–∫–µ—Ä –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
			return
		}
	}
}

// ClassifyProduct –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞
func (c *OSTKClassifier) ClassifyProduct(ctx context.Context, req ProductClassificationRequest) (*ClassificationResult, error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
	select {
	case <-ctx.Done():
		return nil, ctx.Err()
	default:
	}

	log.Printf("üîç –ù–∞—á–∏–Ω–∞—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞ %d: %s", req.ProductID, req.ProductName)

	// –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è API
	apiURL := fmt.Sprintf("%s/products/catformat.php", c.apiBaseURL)

	// –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
	params := url.Values{}
	params.Set("product_name", req.ProductName)
	params.Set("user", strconv.FormatInt(req.UserID, 10))
	params.Set("user_category", req.UserCategory)
	params.Set("brand", req.Brand) // –î–æ–±–∞–≤–ª—è–µ–º –±—Ä–µ–Ω–¥ –∫–∞–∫ –æ–Ω –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —É –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
	params.Set("findbrand", "1")
	params.Set("findcat", "1")

	log.Printf("üîç –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ API: %s?%s", apiURL, params.Encode())

	// –°–æ–∑–¥–∞–µ–º HTTP –∑–∞–ø—Ä–æ—Å
	httpReq, err := http.NewRequestWithContext(ctx, "GET", apiURL+"?"+params.Encode(), nil)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := c.httpClient.Do(httpReq)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}
	defer resp.Body.Close()

	log.Printf("üîç –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API: —Å—Ç–∞—Ç—É—Å %d", resp.StatusCode)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
	select {
	case <-ctx.Done():
		return nil, ctx.Err()
	default:
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å %d", resp.StatusCode)
	}

	// –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
	var result ClassificationResult
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞: %w", err)
	}

	log.Printf("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %+v", result)

	// –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	if result.Status == "found" {
		log.Printf("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ %d: –∫–∞—Ç–µ–≥–æ—Ä–∏—è=%s (ID: %v, —Ç–æ—á–Ω–æ—Å—Ç—å=%.2f), –±—Ä–µ–Ω–¥=%s (ID: %v, —Ç–æ—á–Ω–æ—Å—Ç—å=%.2f)",
			req.ProductID, result.FoundCategory, result.FoundCategoryID, result.Accuracy, result.FoundBrand, result.FoundBrandID, result.BrandAccuracy)
	} else {
		log.Printf("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ %d: —Å—Ç–∞—Ç—É—Å=%s", req.ProductID, result.Status)
	}

	return &result, nil
}

// Close –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
func (c *OSTKClassifier) Close() {
	close(c.classificationQueue)
	log.Printf("üîí –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫—Ä—ã—Ç")
}
