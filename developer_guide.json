{
  "developer_guide": {
    "title": "PortalData API - Руководство разработчика",
    "version": "1.0.0",
    "last_updated": "2025-07-24",
    "setup": {
      "prerequisites": {
        "go_version": "1.21+",
        "database": "PostgreSQL 13+ или MySQL 8.0+",
        "redis": "6.0+ (для rate limiting)",
        "git": "2.30+"
      },
      "installation": {
        "steps": [
          {
            "step": 1,
            "action": "Клонировать репозиторий",
            "command": "git clone https://github.com/portaldataru/api.git"
          },
          {
            "step": 2,
            "action": "Перейти в директорию проекта",
            "command": "cd api"
          },
          {
            "step": 3,
            "action": "Установить зависимости",
            "command": "go mod download"
          },
          {
            "step": 4,
            "action": "Настроить конфигурацию",
            "description": "Скопировать config.yaml.example в config.yaml и настроить параметры"
          },
          {
            "step": 5,
            "action": "Запустить миграции",
            "command": "go run cmd/migrator/main.go"
          },
          {
            "step": 6,
            "action": "Запустить сервер",
            "command": "go run cmd/api/main.go"
          }
        ]
      }
    },
    "project_structure": {
      "root": {
        "description": "Корневая директория проекта",
        "files": {
          "go.mod": "Зависимости Go модулей",
          "go.sum": "Хеши зависимостей",
          "config.yaml": "Конфигурация приложения",
          "openapi.json": "OpenAPI спецификация",
          "openapi.yaml": "OpenAPI спецификация в YAML"
        }
      },
      "cmd": {
        "description": "Точки входа приложений",
        "subdirectories": {
          "api": {
            "description": "Основное API приложение",
            "main.go": "Точка входа API сервера"
          },
          "migrator": {
            "description": "Миграции базы данных",
            "main.go": "Точка входа для миграций"
          },
          "uploader": {
            "description": "Сервис загрузки файлов",
            "main.go": "Точка входа для загрузки"
          }
        }
      },
      "internal": {
        "description": "Внутренний код приложения",
        "modules": {
          "user": {
            "description": "Модуль пользователей и аутентификации",
            "files": [
              "service.go",
              "handlers.go",
              "models.go",
              "repository.go"
            ]
          },

          "offer": {
            "description": "Модуль офферов",
            "files": [
              "service.go",
              "handlers.go",
              "models.go",
              "repository.go"
            ]
          },
          "order": {
            "description": "Модуль заказов",
            "files": [
              "service.go",
              "handlers.go",
              "models.go",
              "repository.go"
            ]
          },
          "warehouse": {
            "description": "Модуль складов",
            "files": [
              "service.go",
              "handlers.go",
              "models.go",
              "repository.go"
            ]
          },
          "ratelimit": {
            "description": "Модуль ограничения скорости",
            "files": [
              "middleware.go",
              "config.go"
            ]
          }
        },
        "pkg": {
          "description": "Переиспользуемые пакеты",
          "subdirectories": {
            "config": {
              "description": "Конфигурация приложения",
              "files": ["config.go", "loader.go"]
            },
            "database": {
              "description": "Подключение к базе данных",
              "files": ["connection.go", "migrations.go"]
            },
            "utils": {
              "description": "Утилиты",
              "files": ["validation.go", "helpers.go"]
            }
          }
        }
      }
    },
    "coding_standards": {
      "go_formatting": {
        "description": "Использовать gofmt для форматирования кода",
        "command": "gofmt -w ."
      },
      "naming_conventions": {
        "packages": "lowercase, одно слово",
        "variables": "camelCase",
        "constants": "UPPER_CASE",
        "functions": "PascalCase для экспортируемых, camelCase для внутренних"
      },
      "error_handling": {
        "rule": "Всегда проверять ошибки",
        "example": "if err != nil { return err }"
      },
      "logging": {
        "levels": ["DEBUG", "INFO", "WARN", "ERROR"],
        "format": "JSON для production, текстовый для development"
      }
    },
    "api_development": {
      "adding_new_endpoint": {
        "steps": [
          {
            "step": 1,
            "action": "Создать модель в models.go",
            "description": "Определить структуру данных"
          },
          {
            "step": 2,
            "action": "Создать репозиторий в repository.go",
            "description": "Добавить методы работы с БД"
          },
          {
            "step": 3,
            "action": "Создать сервис в service.go",
            "description": "Добавить бизнес-логику"
          },
          {
            "step": 4,
            "action": "Создать обработчик в handlers.go",
            "description": "Добавить HTTP обработчики"
          },
          {
            "step": 5,
            "action": "Зарегистрировать маршруты",
            "description": "Добавить в RegisterRoutes"
          },
          {
            "step": 6,
            "action": "Добавить тесты",
            "description": "Создать unit и integration тесты"
          },
          {
            "step": 7,
            "action": "Обновить документацию",
            "description": "Добавить в OpenAPI спецификацию"
          }
        ]
      },
      "response_format": {
        "success": {
          "status": "200 OK",
          "body": {
            "success": true,
            "data": "response_data",
            "message": "optional_message"
          }
        },
        "error": {
          "status": "4xx/5xx",
          "body": {
            "success": false,
            "error": {
              "code": "ERROR_CODE",
              "message": "Human readable message",
              "details": "optional_details"
            }
          }
        }
      }
    },
    "database": {
      "migrations": {
        "location": "internal/pkg/database/migrations",
        "naming": "YYYYMMDD_HHMMSS_description.sql",
        "running": "go run cmd/migrator/main.go"
      },
      "models": {
        "convention": "Использовать GORM теги",
        "example": {
          "struct": "type User struct {",
          "fields": [
            "ID uint `gorm:\"primaryKey\"`",
            "Username string `gorm:\"uniqueIndex\"`",
            "Email string `gorm:\"uniqueIndex\"`",
            "CreatedAt time.Time",
            "UpdatedAt time.Time"
          ]
        }
      }
    },
    "testing": {
      "unit_tests": {
        "location": "internal/modules/*/service_test.go",
        "naming": "*_test.go",
        "running": "go test ./internal/modules/..."
      },
      "integration_tests": {
        "location": "tests/",
        "files": [
          "comprehensive_api_test.php",
          "test_offer_roles_and_coordinates.php"
        ]
      },
      "coverage": {
        "command": "go test -cover ./...",
        "target": ">80% для новых функций"
      }
    },
    "deployment": {
      "environment_variables": {
        "DATABASE_URL": "Строка подключения к БД",
        "REDIS_URL": "Строка подключения к Redis",
        "JWT_SECRET": "Секретный ключ для JWT",
        "API_PORT": "Порт для API (по умолчанию 8095)"
      },
      "docker": {
        "dockerfile": "Dockerfile в корне проекта",
        "docker_compose": "docker-compose.yml для локальной разработки"
      },
      "production": {
        "reverse_proxy": "Nginx",
        "process_manager": "systemd",
        "monitoring": "Prometheus + Grafana"
      }
    },
    "troubleshooting": {
      "common_issues": [
        {
          "issue": "Ошибка подключения к БД",
          "solution": "Проверить DATABASE_URL и доступность БД"
        },
        {
          "issue": "Ошибка JWT токена",
          "solution": "Проверить JWT_SECRET и формат токена"
        },
        {
          "issue": "Rate limiting слишком строгий",
          "solution": "Настроить лимиты в Redis"
        },
        {
          "issue": "CORS ошибки",
          "solution": "Проверить настройки CORS в middleware"
        }
      ],
      "logs": {
        "access": "server.log",
        "errors": "app_8095.log",
        "database": "app_8095_mysql.log"
      }
    },
    "performance": {
      "optimization": [
        "Использовать connection pooling для БД",
        "Кэшировать часто запрашиваемые данные в Redis",
        "Использовать индексы в БД для часто используемых запросов",
        "Ограничивать размер ответов (пагинация)"
      ],
      "monitoring": {
        "metrics": [
          "response_time",
          "error_rate",
          "requests_per_second",
          "database_connections"
        ],
        "alerts": [
          "error_rate > 5%",
          "response_time > 2s",
          "database_connections > 80%"
        ]
      }
    },
    "security": {
      "best_practices": [
        "Всегда валидировать входные данные",
        "Использовать prepared statements для SQL",
        "Ограничивать размер загружаемых файлов",
        "Логировать все важные действия",
        "Использовать HTTPS в production"
      ],
      "authentication": {
        "jwt": {
          "expiration": "24 часа",
          "refresh": "7 дней",
          "algorithm": "HS256"
        }
      }
    }
  }
} 