<?php
/**
 * –¢–ï–°–¢ –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ö–û–û–†–î–ò–ù–ê–¢ –ü–†–ò –°–ú–ï–ù–ï –°–ö–õ–ê–î–ê
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ñ—Ñ–µ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ warehouse_id
 */

class WarehouseCoordinatesUpdateTest {
    private $baseUrl = 'http://localhost:8095/api/v1';
    private $users = [
        'user1' => [
            'name' => 'clear13808',
            'api_token' => '80479fe392866b79e55c1640c107ee96c6aa25b7f8acf627a5ef226a5d8d1a27'
        ]
    ];
    
    private $testResults = [];
    private $createdProducts = [];
    private $createdOffers = [];
    private $createdWarehouses = [];
    private $performanceMetrics = [];

    public function runAllTests() {
        echo "üè≠ –¢–ï–°–¢ –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ö–û–û–†–î–ò–ù–ê–¢ –ü–†–ò –°–ú–ï–ù–ï –°–ö–õ–ê–î–ê\n";
        echo "================================================\n\n";

        // 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        $this->createTestResources();
        
        // 2. –¢–µ—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–∫–ª–∞–¥–∞
        $this->testWarehouseChangeCoordinates();
        
        // 3. –¢–µ—Å—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ —Å–∫–ª–∞–¥–æ–≤
        $this->testDifferentWarehouseCoordinates();
        
        // 4. –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        $this->printResults();
    }

    private function createTestResources() {
        echo "üì¶ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –†–ï–°–£–†–°–û–í\n";
        echo "--------------------------------\n";
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
        $productData = [
            'name' => '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç',
            'vendor_article' => 'COORD-TEST-' . time(),
            'recommend_price' => 100.00,
            'brand' => 'TestBrand',
            'category' => 'TestCategory',
            'description' => '–ü—Ä–æ–¥—É–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç'
        ];
        
        $response = $this->makeRequest('POST', '/products', $productData, $this->users['user1']['api_token']);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞', $response['status'] === 201, $response);
        if ($response['status'] === 201) {
            $this->createdProducts['main'] = $response['data']['id'];
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Å–∫–ª–∞–¥–∞ (–ú–æ—Å–∫–≤–∞)
        $warehouse1Data = [
            'name' => '–°–∫–ª–∞–¥ –ú–æ—Å–∫–≤–∞',
            'address' => '–ú–æ—Å–∫–≤–∞, –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, 1',
            'latitude' => 55.7558,
            'longitude' => 37.6176,
            'working_hours' => '09:00-18:00'
        ];
        
        $response = $this->makeRequest('POST', '/warehouses', $warehouse1Data, $this->users['user1']['api_token']);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ 1 (–ú–æ—Å–∫–≤–∞)', $response['status'] === 201, $response);
        if ($response['status'] === 201) {
            $this->createdWarehouses['moscow'] = $response['data']['id'];
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ —Å–∫–ª–∞–¥–∞ (–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥)
        $warehouse2Data = [
            'name' => '–°–∫–ª–∞–¥ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
            'address' => '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ù–µ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 1',
            'latitude' => 59.9311,
            'longitude' => 30.3609,
            'working_hours' => '10:00-19:00'
        ];
        
        $response = $this->makeRequest('POST', '/warehouses', $warehouse2Data, $this->users['user1']['api_token']);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ 2 (–°–ü–±)', $response['status'] === 201, $response);
        if ($response['status'] === 201) {
            $this->createdWarehouses['spb'] = $response['data']['id'];
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ—Ç—å–µ–≥–æ —Å–∫–ª–∞–¥–∞ (–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥)
        $warehouse3Data = [
            'name' => '–°–∫–ª–∞–¥ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
            'address' => '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, —É–ª. –õ–µ–Ω–∏–Ω–∞, 1',
            'latitude' => 56.8519,
            'longitude' => 60.6122,
            'working_hours' => '08:00-17:00'
        ];
        
        $response = $this->makeRequest('POST', '/warehouses', $warehouse3Data, $this->users['user1']['api_token']);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ 3 (–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥)', $response['status'] === 201, $response);
        if ($response['status'] === 201) {
            $this->createdWarehouses['ekb'] = $response['data']['id'];
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ —Å –ø–µ—Ä–≤—ã–º —Å–∫–ª–∞–¥–æ–º
        if (isset($this->createdProducts['main']) && isset($this->createdWarehouses['moscow'])) {
            $offerData = [
                'product_id' => $this->createdProducts['main'],
                'offer_type' => 'sale',
                'price_per_unit' => 150.00,
                'units_per_lot' => 1,
                'available_lots' => 10,
                'tax_nds' => 20,
                'warehouse_id' => $this->createdWarehouses['moscow'],
                'is_public' => true,
                'max_shipping_days' => 7
            ];
            
            $response = $this->makeRequest('POST', '/offers', $offerData, $this->users['user1']['api_token']);
            $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ —Å –º–æ—Å–∫–æ–≤—Å–∫–∏–º —Å–∫–ª–∞–¥–æ–º', $response['status'] === 201, $response);
            if ($response['status'] === 201) {
                $this->createdOffers['main'] = $response['data']['offer_id'];
            }
        }
        
        echo "\n";
    }

    private function testWarehouseChangeCoordinates() {
        echo "üìç –¢–ï–°–¢ –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ö–û–û–†–î–ò–ù–ê–¢ –ü–†–ò –°–ú–ï–ù–ï –°–ö–õ–ê–î–ê\n";
        echo "------------------------------------------------\n";
        
        if (!isset($this->createdOffers['main']) || !isset($this->createdWarehouses['spb'])) {
            echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞\n";
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ñ—Ñ–µ—Ä–∞
        $response = $this->makeRequest('GET', '/offers/' . $this->createdOffers['main'], null, $this->users['user1']['api_token']);
        $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞', $response['status'] === 200, $response);
        
        if ($response['status'] === 200) {
            $originalLatitude = $response['data']['latitude'];
            $originalLongitude = $response['data']['longitude'];
            
            echo "   üìç –ò—Å—Ö–æ–¥–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: $originalLatitude, $originalLongitude (–ú–æ—Å–∫–≤–∞)\n";
            
            // –ú–µ–Ω—è–µ–º —Å–∫–ª–∞–¥ –Ω–∞ –°–ü–±
            $updateData = [
                'warehouse_id' => $this->createdWarehouses['spb']
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('PUT', '/offers/' . $this->createdOffers['main'], $updateData, $this->users['user1']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–°–º–µ–Ω–∞ —Å–∫–ª–∞–¥–∞ –Ω–∞ –°–ü–±'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–°–º–µ–Ω–∞ —Å–∫–ª–∞–¥–∞ –Ω–∞ –°–ü–±', $response['status'] === 200, $response);
            
            if ($response['status'] === 200) {
                $newLatitude = $response['data']['latitude'];
                $newLongitude = $response['data']['longitude'];
                
                echo "   üìç –ù–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: $newLatitude, $newLongitude (–°–ü–±)\n";
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
                $coordinatesChanged = ($newLatitude != $originalLatitude) || ($newLongitude != $originalLongitude);
                $this->assertTest('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–∫–ª–∞–¥–∞', $coordinatesChanged, $response);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –°–ü–±
                $spbCoordinates = ($newLatitude == 59.9311) && ($newLongitude == 30.3609);
                $this->assertTest('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –°–ü–±', $spbCoordinates, $response);
            }
        }
        
        echo "\n";
    }

    private function testDifferentWarehouseCoordinates() {
        echo "üåç –¢–ï–°–¢ –° –†–ê–ó–ù–´–ú–ò –ö–û–û–†–î–ò–ù–ê–¢–ê–ú–ò –°–ö–õ–ê–î–û–í\n";
        echo "----------------------------------------\n";
        
        if (!isset($this->createdOffers['main']) || !isset($this->createdWarehouses['ekb'])) {
            echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞\n";
            return;
        }
        
        // –ú–µ–Ω—è–µ–º —Å–∫–ª–∞–¥ –Ω–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥
        $updateData = [
            'warehouse_id' => $this->createdWarehouses['ekb']
        ];
        
        $startTime = microtime(true);
        $response = $this->makeRequest('PUT', '/offers/' . $this->createdOffers['main'], $updateData, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–°–º–µ–Ω–∞ —Å–∫–ª–∞–¥–∞ –Ω–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–°–º–µ–Ω–∞ —Å–∫–ª–∞–¥–∞ –Ω–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', $response['status'] === 200, $response);
        
        if ($response['status'] === 200) {
            $newLatitude = $response['data']['latitude'];
            $newLongitude = $response['data']['longitude'];
            
            echo "   üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã –Ω–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥: $newLatitude, $newLongitude\n";
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—É
            $ekbCoordinates = ($newLatitude == 56.8519) && ($newLongitude == 60.6122);
            $this->assertTest('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—É', $ekbCoordinates, $response);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –°–ü–±
            $notSpbCoordinates = ($newLatitude != 59.9311) || ($newLongitude != 30.3609);
            $this->assertTest('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –°–ü–±', $notSpbCoordinates, $response);
        }
        
        echo "\n";
    }

    private function makeRequest($method, $endpoint, $data = null, $apiToken = null) {
        $url = $this->baseUrl . $endpoint;
        
        $headers = [
            'Content-Type: application/json',
            'Accept: application/json'
        ];
        
        if ($apiToken) {
            $headers[] = 'Authorization: Bearer ' . $apiToken;
        }
        
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        curl_setopt($ch, CURLOPT_TIMEOUT, 30);
        
        if ($method === 'POST') {
            curl_setopt($ch, CURLOPT_POST, true);
            if ($data) {
                curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
            }
        } elseif ($method === 'PUT') {
            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');
            if ($data) {
                curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
            }
        } elseif ($method === 'GET') {
            // GET request
        }
        
        $response = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);
        
        return [
            'status' => $httpCode,
            'data' => json_decode($response, true),
            'raw' => $response
        ];
    }

    private function assertTest($testName, $condition, $response) {
        $result = $condition ? '‚úÖ –ü–†–û–ô–î–ï–ù' : '‚ùå –ü–†–û–í–ê–õ–ï–ù';
        $status = $response['status'];
        $message = isset($response['data']['error']) ? $response['data']['error'] : '';
        
        echo sprintf("%-50s %s (HTTP %d)", $testName, $result, $status);
        if ($message) {
            echo " - $message";
        }
        echo "\n";
        
        $this->testResults[] = [
            'name' => $testName,
            'passed' => $condition,
            'status' => $status,
            'message' => $message
        ];
    }

    private function printResults() {
        echo "\n" . str_repeat("=", 80) . "\n";
        echo "üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ö–û–û–†–î–ò–ù–ê–¢\n";
        echo str_repeat("=", 80) . "\n\n";
        
        $totalTests = count($this->testResults);
        $passedTests = count(array_filter($this->testResults, function($test) {
            return $test['passed'];
        }));
        $failedTests = $totalTests - $passedTests;
        $successRate = round(($passedTests / $totalTests) * 100, 2);
        
        echo "üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n";
        echo "   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: $totalTests\n";
        echo "   –ü—Ä–æ–π–¥–µ–Ω–æ: $passedTests\n";
        echo "   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: $failedTests\n";
        echo "   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: $successRate%\n\n";
        
        echo "‚ö° –ú–ï–¢–†–ò–ö–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:\n";
        echo str_repeat("-", 80) . "\n";
        foreach ($this->performanceMetrics as $testName => $time) {
            echo sprintf("%-50s %6.2f –º—Å\n", $testName, $time);
        }
        echo str_repeat("-", 80) . "\n";
        
        if ($failedTests > 0) {
            echo "\n‚ùå –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´:\n";
            echo str_repeat("-", 80) . "\n";
            foreach ($this->testResults as $test) {
                if (!$test['passed']) {
                    echo sprintf("‚Ä¢ %s (HTTP %d): %s\n", $test['name'], $test['status'], $test['message']);
                }
            }
        }
        
        echo "\n" . str_repeat("=", 80) . "\n";
        echo "üéØ –í–´–í–û–î–´:\n";
        if ($successRate >= 90) {
            echo "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n";
        } elseif ($successRate >= 80) {
            echo "‚ö†Ô∏è  –ï—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.\n";
        } else {
            echo "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.\n";
        }
        echo str_repeat("=", 80) . "\n";
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
$test = new WarehouseCoordinatesUpdateTest();
$test->runAllTests();
?> 