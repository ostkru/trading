<?php
/**
 * –£–õ–£–ß–®–ï–ù–ù–´–ô –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –í–°–ï–• –ú–ï–¢–û–î–û–í API PortalData
 * –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Å –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π + –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 */

class ComprehensiveAPITestImproved {
    private $baseUrl = 'http://localhost:8095/api';
    private $users = [
        'user1' => [
            'name' => 'clear13808',
            'api_token' => 'sk_a8fe0d325d5355e598dbdf719fc7911a7fc4889a0335d6dfcf2128b7e5c9fb30'
        ],
        'user2' => [
            'name' => 'veriy47043', 
            'api_token' => 'f9c912b6989eb166ee48ec6d8f07a2b0d29d5efc8ae1c2e44fac9fe8c4d4a0b5'
        ],
        'user3' => [
            'name' => '5ij48m4gcm',
            'api_token' => '00601582c3163466e0fece95d8e2315cb1c66814066ad8e0566d2813614d9001'
        ]
    ];
    
    private $testResults = [];
    private $createdProducts = [];
    private $createdOffers = [];
    private $createdOrders = [];
    private $createdWarehouses = [];
    private $performanceMetrics = [];

    public function runAllTests() {
        $totalStartTime = microtime(true);
        
        echo "üöÄ –£–õ–£–ß–®–ï–ù–ù–´–ô –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –í–°–ï–• –ú–ï–¢–û–î–û–í API\n";
        echo "==================================================\n\n";

        try {
            // 1. –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            $this->testBasicEndpoints();
            
            // 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (—Å–æ–∑–¥–∞–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ)
            $this->testProductsFullCycle();
            
            // 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ (—Å–æ–∑–¥–∞–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ)
            $this->testWarehousesFullCycle();
            
            // 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (—Å–æ–∑–¥–∞–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ)
            $this->testOffersFullCycle();
            
            // 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ (—Å–æ–∑–¥–∞–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞)
            $this->testOrdersFullCycle();
            
            // 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
            $this->testPublicRoutes();
            
            // 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            $this->testErrorScenarios();
            
            // 8. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            $this->testSecurityScenarios();
            
            // 9. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            $this->testBatchOperations();
            
            // 10. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
            $this->testSpecialMethods();
            
            // 11. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis Rate Limiting
            $this->testRedisRateLimiting();
            
            // 12. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ (–¥–æ–ª–∂–Ω—ã –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è)
            $this->testIncorrectAlgorithms();
            
        } finally {
            // –í–°–ï–ì–î–ê –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É, –¥–∞–∂–µ –µ—Å–ª–∏ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å
            $this->cleanupAllEntities();
        }
        
        $totalEndTime = microtime(true);
        $this->performanceMetrics['total_time'] = round(($totalEndTime - $totalStartTime) * 1000, 2);
        
        // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        $this->printResults();
    }

    private function testBasicEndpoints() {
        echo "üìã 1. –ë–ê–ó–û–í–´–ï –ü–†–û–í–ï–†–ö–ò\n";
        echo "------------------------\n";
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ endpoint (–º–æ–∂–µ—Ç –±—ã—Ç—å 404 - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '', null, null);
        $endTime = microtime(true);
        $this->performanceMetrics['–û—Å–Ω–æ–≤–Ω–æ–π endpoint'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–û—Å–Ω–æ–≤–Ω–æ–π endpoint', $response['status'] === 200 || $response['status'] === 404, $response);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/products', null, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['API –¥–æ—Å—Ç—É–ø–µ–Ω'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('API –¥–æ—Å—Ç—É–ø–µ–Ω', $response['status'] === 200, $response);
        
        echo "\n";
    }

    private function testProductsFullCycle() {
        echo "üì¶ 2. –ü–û–õ–ù–´–ô –¶–ò–ö–õ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–†–û–î–£–ö–¢–û–í\n";
        echo "--------------------------------------------\n";
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º 1
        $productData = [
            'name' => '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç User1',
            'vendor_article' => 'TEST-USER1-' . time(),
            'recommend_price' => 150.50,
            'brand' => 'TestBrand',
            'category' => 'TestCategory',
            'description' => '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ—Ç User1'
        ];
        
        $startTime = microtime(true);
        $response = $this->makeRequest('POST', '/products', $productData, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ User1'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ User1', $response['status'] === 201, $response);
        
        if ($response['status'] === 201 && isset($response['data']['id'])) {
            $this->createdProducts['user1'] = $response['data']['id'];
            
            // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
            $startTime = microtime(true);
            $response = $this->makeRequest('GET', '/products/' . $this->createdProducts['user1'], null, $this->users['user1']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ ID'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ ID', $response['status'] === 200, $response);
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
            $updateData = [
                'name' => '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç User1',
                'recommend_price' => 175.25
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('PUT', '/products/' . $this->createdProducts['user1'], $updateData, $this->users['user1']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞', $response['status'] === 200, $response);
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º 2
        $productData = [
            'name' => '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç User2',
            'vendor_article' => 'TEST-USER2-' . time(),
            'recommend_price' => 200.75,
            'brand' => 'TestBrand2',
            'category' => 'TestCategory2',
            'description' => '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ—Ç User2'
        ];
        
        $startTime = microtime(true);
        $response = $this->makeRequest('POST', '/products', $productData, $this->users['user2']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ User2'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ User2', $response['status'] === 201, $response);
        
        if ($response['status'] === 201 && isset($response['data']['id'])) {
            $this->createdProducts['user2'] = $response['data']['id'];
            
            // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ user2
            $startTime = microtime(true);
            $response = $this->makeRequest('GET', '/products/' . $this->createdProducts['user2'], null, $this->users['user2']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ User2 –ø–æ ID'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ User2 –ø–æ ID', $response['status'] === 200, $response);
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ user2
            $updateData = [
                'name' => '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç User2',
                'recommend_price' => 225.50
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('PUT', '/products/' . $this->createdProducts['user2'], $updateData, $this->users['user2']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ User2'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ User2', $response['status'] === 200, $response);
        }
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/products', null, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤', $response['status'] === 200, $response);
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è user2
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/products', null, $this->users['user2']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ User2'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ User2', $response['status'] === 200, $response);
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–¥–æ–ª–∂–Ω–æ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è)
        echo "   üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:\n";
        
        // –ü—É—Å—Ç–æ–µ –∏–º—è
        $invalidProductData = [
            'name' => '',
            'vendor_article' => 'TEST-EMPTY-' . time(),
            'recommend_price' => 100.00,
            'brand' => 'TestBrand',
            'category' => 'TestCategory'
        ];
        
        $startTime = microtime(true);
        $response = $this->makeRequest('POST', '/products', $invalidProductData, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø—É—Å—Ç—ã–º –∏–º–µ–Ω–µ–º'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø—É—Å—Ç—ã–º –∏–º–µ–Ω–µ–º', $response['status'] === 400, $response);
        
        // –ü—É—Å—Ç–æ–π –∞—Ä—Ç–∏–∫—É–ª
        $invalidProductData = [
            'name' => 'Test Product',
            'vendor_article' => '',
            'recommend_price' => 100.00,
            'brand' => 'TestBrand',
            'category' => 'TestCategory'
        ];
        
        $startTime = microtime(true);
        $response = $this->makeRequest('POST', '/products', $invalidProductData, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø—É—Å—Ç—ã–º –∞—Ä—Ç–∏–∫—É–ª–æ–º'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø—É—Å—Ç—ã–º –∞—Ä—Ç–∏–∫—É–ª–æ–º', $response['status'] === 400, $response);
        
        // –ü—É—Å—Ç–æ–π –±—Ä–µ–Ω–¥
        $invalidProductData = [
            'name' => 'Test Product',
            'vendor_article' => 'TEST-EMPTY-BRAND-' . time(),
            'recommend_price' => 100.00,
            'brand' => '',
            'category' => 'TestCategory'
        ];
        
        $startTime = microtime(true);
        $response = $this->makeRequest('POST', '/products', $invalidProductData, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø—É—Å—Ç—ã–º –±—Ä–µ–Ω–¥–æ–º'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø—É—Å—Ç—ã–º –±—Ä–µ–Ω–¥–æ–º', $response['status'] === 400, $response);
        
        // –ü—É—Å—Ç–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        $invalidProductData = [
            'name' => 'Test Product',
            'vendor_article' => 'TEST-EMPTY-CATEGORY-' . time(),
            'recommend_price' => 100.00,
            'brand' => 'TestBrand',
            'category' => ''
        ];
        
        $startTime = microtime(true);
        $response = $this->makeRequest('POST', '/products', $invalidProductData, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø—É—Å—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø—É—Å—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π', $response['status'] === 400, $response);
        
        // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞
        $invalidProductData = [
            'name' => 'Test Product',
            'vendor_article' => 'TEST-NEGATIVE-PRICE-' . time(),
            'recommend_price' => -100.00,
            'brand' => 'TestBrand',
            'category' => 'TestCategory'
        ];
        
        $startTime = microtime(true);
        $response = $this->makeRequest('POST', '/products', $invalidProductData, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π', $response['status'] === 400, $response);
        
        // –ù—É–ª–µ–≤–∞—è —Ü–µ–Ω–∞
        $invalidProductData = [
            'name' => 'Test Product',
            'vendor_article' => 'TEST-ZERO-PRICE-' . time(),
            'recommend_price' => 0.00,
            'brand' => 'TestBrand',
            'category' => 'TestCategory'
        ];
        
        $startTime = microtime(true);
        $response = $this->makeRequest('POST', '/products', $invalidProductData, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –Ω—É–ª–µ–≤–æ–π —Ü–µ–Ω–æ–π'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –Ω—É–ª–µ–≤–æ–π —Ü–µ–Ω–æ–π', $response['status'] === 400, $response);
        
        echo "\n";
    }

    private function testWarehousesFullCycle() {
        echo "üè≠ 3. –ü–û–õ–ù–´–ô –¶–ò–ö–õ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ö–õ–ê–î–û–í\n";
        echo "----------------------------------------\n";
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ User1
        $warehouseData = [
            'name' => '–°–∫–ª–∞–¥ User1',
            'address' => '—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 1',
            'latitude' => 55.7558,
            'longitude' => 37.6176,
            'working_hours' => '09:00-18:00'
        ];
        
        $startTime = microtime(true);
        $response = $this->makeRequest('POST', '/warehouses', $warehouseData, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ User1'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ User1', $response['status'] === 201, $response);
        
        if ($response['status'] === 201) {
            // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            echo "   üîç –û—Ç–ª–∞–¥–∫–∞: —Å–∫–ª–∞–¥ —Å–æ–∑–¥–∞–Ω, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞\n";
            echo "   üîç –°—Ç–∞—Ç—É—Å: " . $response['status'] . "\n";
            echo "   üîç –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: " . json_encode($response) . "\n";
            
            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
            if (isset($response['data']['id'])) {
                $this->createdWarehouses['user1'] = $response['data']['id'];
                echo "   ‚úÖ –ù–∞–π–¥–µ–Ω data.id: " . $this->createdWarehouses['user1'] . "\n";
            } elseif (isset($response['data']['warehouse_id'])) {
                $this->createdWarehouses['user1'] = $response['data']['warehouse_id'];
                echo "   ‚úÖ –ù–∞–π–¥–µ–Ω data.warehouse_id: " . $this->createdWarehouses['user1'] . "\n";
            } elseif (isset($response['data']['warehouse']['id'])) {
                $this->createdWarehouses['user1'] = $response['data']['warehouse']['id'];
                echo "   ‚úÖ –ù–∞–π–¥–µ–Ω data.warehouse.id: " . $this->createdWarehouses['user1'] . "\n";
            } elseif (isset($response['id'])) {
                $this->createdWarehouses['user1'] = $response['id'];
                echo "   ‚úÖ –ù–∞–π–¥–µ–Ω id: " . $this->createdWarehouses['user1'] . "\n";
            } elseif (isset($response['warehouse_id'])) {
                $this->createdWarehouses['user1'] = $response['warehouse_id'];
                echo "   ‚úÖ –ù–∞–π–¥–µ–Ω warehouse_id: " . $this->createdWarehouses['user1'] . "\n";
            } else {
                echo "   ‚ùå ID —Å–∫–ª–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ\n";
            }
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞
            $updateData = [
                'name' => '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–∫–ª–∞–¥ User1',
                'address' => '—É–ª. –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è, 1'
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('PUT', '/warehouses/' . $this->createdWarehouses['user1'], $updateData, $this->users['user1']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ User1'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ User1', $response['status'] === 200, $response);
        } else {
            echo "   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞ - —Å–∫–ª–∞–¥ –Ω–µ —Å–æ–∑–¥–∞–Ω\n";
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ User2
        $warehouseData = [
            'name' => '–°–∫–ª–∞–¥ User2',
            'address' => '—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 2',
            'latitude' => 55.7600,
            'longitude' => 37.6200,
            'working_hours' => '10:00-19:00'
        ];
        
        $startTime = microtime(true);
        $response = $this->makeRequest('POST', '/warehouses', $warehouseData, $this->users['user2']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ User2'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ User2', $response['status'] === 201, $response);
        
        if ($response['status'] === 201) {
            // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            echo "   üîç –û—Ç–ª–∞–¥–∫–∞: —Å–∫–ª–∞–¥ user2 —Å–æ–∑–¥–∞–Ω, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞\n";
            echo "   üîç –°—Ç–∞—Ç—É—Å: " . $response['status'] . "\n";
            echo "   üîç –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: " . json_encode($response) . "\n";
            
            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
            if (isset($response['data']['id'])) {
                $this->createdWarehouses['user2'] = $response['data']['id'];
                echo "   ‚úÖ –ù–∞–π–¥–µ–Ω data.id: " . $this->createdWarehouses['user2'] . "\n";
            } elseif (isset($response['data']['warehouse_id'])) {
                $this->createdWarehouses['user2'] = $response['data']['warehouse_id'];
                echo "   ‚úÖ –ù–∞–π–¥–µ–Ω data.warehouse_id: " . $this->createdWarehouses['user2'] . "\n";
            } elseif (isset($response['data']['warehouse']['id'])) {
                $this->createdWarehouses['user2'] = $response['data']['warehouse']['id'];
                echo "   ‚úÖ –ù–∞–π–¥–µ–Ω data.warehouse.id: " . $this->createdWarehouses['user2'] . "\n";
            } elseif (isset($response['id'])) {
                $this->createdWarehouses['user2'] = $response['id'];
                echo "   ‚úÖ –ù–∞–π–¥–µ–Ω id: " . $this->createdWarehouses['user2'] . "\n";
            } elseif (isset($response['warehouse_id'])) {
                $this->createdWarehouses['user2'] = $response['warehouse_id'];
                echo "   ‚úÖ –ù–∞–π–¥–µ–Ω warehouse_id: " . $this->createdWarehouses['user2'] . "\n";
            } else {
                echo "   ‚ùå ID —Å–∫–ª–∞–¥–∞ user2 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ\n";
            }
            
            // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞ user2
            $startTime = microtime(true);
            $response = $this->makeRequest('GET', '/warehouses/' . $this->createdWarehouses['user2'], null, $this->users['user2']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ User2 –ø–æ ID'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ User2 –ø–æ ID', $response['status'] === 200 || $response['status'] === 404, $response);
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ user2
            $updateData = [
                'name' => '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–∫–ª–∞–¥ User2',
                'address' => '—É–ª. –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è, 2'
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('PUT', '/warehouses/' . $this->createdWarehouses['user2'], $updateData, $this->users['user2']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ User2'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ User2', $response['status'] === 200, $response);
        }
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/warehouses', null, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤', $response['status'] === 200, $response);
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è user2
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/warehouses', null, $this->users['user2']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ User2'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ User2', $response['status'] === 200, $response);
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∫–ª–∞–¥–æ–≤ (–¥–æ–ª–∂–Ω–æ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è)
        if (isset($this->createdWarehouses['user1']) && isset($this->createdWarehouses['user2'])) {
            $updateData = [
                'name' => '–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å —á—É–∂–æ–π —Å–∫–ª–∞–¥',
                'address' => '—É–ª. –í–∑–ª–æ–º–∞–Ω–Ω–∞—è, 999'
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('PUT', '/warehouses/' . $this->createdWarehouses['user1'], $updateData, $this->users['user2']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ —Å–∫–ª–∞–¥–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ —Å–∫–ª–∞–¥–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)', $response['status'] === 403, $response);
        } else {
            echo "   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∫–ª–∞–¥–æ–≤ - –Ω–µ—Ç –¥–≤—É—Ö —Å–∫–ª–∞–¥–æ–≤\n";
        }
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∫–ª–∞–¥–æ–≤ (–¥–æ–ª–∂–Ω–æ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è)
        echo "   üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∫–ª–∞–¥–æ–≤:\n";
        
        // –°–∫–ª–∞–¥ —Å –ø—É—Å—Ç—ã–º –∏–º–µ–Ω–µ–º
        $invalidWarehouseData = [
            'name' => '',
            'address' => '—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 999',
            'latitude' => 55.7558,
            'longitude' => 37.6176
        ];
        
        $startTime = microtime(true);
        $response = $this->makeRequest('POST', '/warehouses', $invalidWarehouseData, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ —Å –ø—É—Å—Ç—ã–º –∏–º–µ–Ω–µ–º'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ —Å –ø—É—Å—Ç—ã–º –∏–º–µ–Ω–µ–º', $response['status'] === 400, $response);
        
        // –°–∫–ª–∞–¥ —Å –ø—É—Å—Ç—ã–º –∞–¥—Ä–µ—Å–æ–º
        $invalidWarehouseData = [
            'name' => '–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫–ª–∞–¥',
            'address' => '',
            'latitude' => 55.7558,
            'longitude' => 37.6176
        ];
        
        $startTime = microtime(true);
        $response = $this->makeRequest('POST', '/warehouses', $invalidWarehouseData, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ —Å –ø—É—Å—Ç—ã–º –∞–¥—Ä–µ—Å–æ–º'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ —Å –ø—É—Å—Ç—ã–º –∞–¥—Ä–µ—Å–æ–º', $response['status'] === 400, $response);
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è user2 (–¥–æ–ª–∂–Ω–æ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è)
        if (isset($this->createdWarehouses['user1'])) {
            $updateData = [
                'name' => '–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å —á—É–∂–æ–π —Å–∫–ª–∞–¥ user2',
                'address' => '—É–ª. –í–∑–ª–æ–º–∞–Ω–Ω–∞—è user2, 999'
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('PUT', '/warehouses/' . $this->createdWarehouses['user1'], $updateData, $this->users['user2']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ —Å–∫–ª–∞–¥–∞ User2 (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ —Å–∫–ª–∞–¥–∞ User2 (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)', $response['status'] === 403, $response);
        } else {
            echo "   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∫–ª–∞–¥–æ–≤ User2 - –Ω–µ—Ç —Å–∫–ª–∞–¥–æ–≤ user1\n";
        }
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è user1 (–¥–æ–ª–∂–Ω–æ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è)
        if (isset($this->createdWarehouses['user2'])) {
            $updateData = [
                'name' => '–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å —á—É–∂–æ–π —Å–∫–ª–∞–¥ user1',
                'address' => '—É–ª. –í–∑–ª–æ–º–∞–Ω–Ω–∞—è user1, 999'
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('PUT', '/warehouses/' . $this->createdWarehouses['user2'], $updateData, $this->users['user1']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ —Å–∫–ª–∞–¥–∞ User1 (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ —Å–∫–ª–∞–¥–∞ User1 (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)', $response['status'] === 403, $response);
        } else {
            echo "   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∫–ª–∞–¥–æ–≤ User1 - –Ω–µ—Ç —Å–∫–ª–∞–¥–æ–≤ user2\n";
        }
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è user2 (–¥–æ–ª–∂–Ω–æ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è)
        if (isset($this->createdWarehouses['user1'])) {
            $updateData = [
                'name' => '–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å —á—É–∂–æ–π —Å–∫–ª–∞–¥ user2',
                'address' => '—É–ª. –í–∑–ª–æ–º–∞–Ω–Ω–∞—è user2, 999'
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('PUT', '/warehouses/' . $this->createdWarehouses['user1'], $updateData, $this->users['user2']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ —Å–∫–ª–∞–¥–∞ User2 (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ —Å–∫–ª–∞–¥–∞ User2 (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)', $response['status'] === 403, $response);
        } else {
            echo "   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∫–ª–∞–¥–æ–≤ User2 - –Ω–µ—Ç —Å–∫–ª–∞–¥–æ–≤ user1\n";
        }
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è user1 (–¥–æ–ª–∂–Ω–æ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è)
        if (isset($this->createdWarehouses['user2'])) {
            $updateData = [
                'name' => '–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å —á—É–∂–æ–π —Å–∫–ª–∞–¥ user1',
                'address' => '—É–ª. –í–∑–ª–æ–º–∞–Ω–Ω–∞—è user1, 999'
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('PUT', '/warehouses/' . $this->createdWarehouses['user2'], $updateData, $this->users['user1']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ —Å–∫–ª–∞–¥–∞ User1 (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ —Å–∫–ª–∞–¥–∞ User1 (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)', $response['status'] === 403, $response);
        } else {
            echo "   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∫–ª–∞–¥–æ–≤ User1 - –Ω–µ—Ç —Å–∫–ª–∞–¥–æ–≤ user2\n";
        }
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–¥–æ–ª–∂–Ω–æ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è)
        if (isset($this->createdProducts['user1']) && isset($this->createdProducts['user2'])) {
            $updateData = [
                'name' => '–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å —á—É–∂–æ–π –ø—Ä–æ–¥—É–∫—Ç',
                'recommend_price' => 999.99
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('PUT', '/products/' . $this->createdProducts['user1'], $updateData, $this->users['user2']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)', $response['status'] === 403, $response);
        } else {
            echo "   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ - –Ω–µ—Ç –¥–≤—É—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n";
        }
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è user1 (–¥–æ–ª–∂–Ω–æ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è)
        if (isset($this->createdProducts['user2'])) {
            $updateData = [
                'name' => '–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å —á—É–∂–æ–π –ø—Ä–æ–¥—É–∫—Ç user1',
                'recommend_price' => 999.99
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('PUT', '/products/' . $this->createdProducts['user2'], $updateData, $this->users['user1']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ User1 (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ User1 (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)', $response['status'] === 403, $response);
        } else {
            echo "   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ User1 - –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ user2\n";
        }
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è user2 (–¥–æ–ª–∂–Ω–æ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è)
        if (isset($this->createdProducts['user1'])) {
            $updateData = [
                'name' => '–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å —á—É–∂–æ–π –ø—Ä–æ–¥—É–∫—Ç user2',
                'recommend_price' => 999.99
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('PUT', '/products/' . $this->createdProducts['user1'], $updateData, $this->users['user2']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ User2 (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ User2 (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)', $response['status'] === 403, $response);
        } else {
            echo "   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ User2 - –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ user1\n";
        }
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–¥–æ–ª–∂–Ω–æ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è)
        if (isset($this->createdOffers['user1']) && isset($this->createdOffers['user2'])) {
            $updateData = [
                'price_per_unit' => 999.99,
                'available_lots' => 999
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('PUT', '/offers/' . $this->createdOffers['user1'], $updateData, $this->users['user2']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)', $response['status'] === 403, $response);
        } else {
            echo "   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π - –Ω–µ—Ç –¥–≤—É—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π\n";
        }
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–¥–æ–ª–∂–Ω–æ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è)
        if (isset($this->createdProducts['user1']) && isset($this->createdWarehouses['user1'])) {
            echo "   üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:\n";
            
            // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º product_id
            $invalidOfferData = [
                'product_id' => 999999,
                'offer_type' => 'sale',
                'price_per_unit' => 100.00,
                'available_lots' => 10,
                'warehouse_id' => $this->createdWarehouses['user1']
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('POST', '/offers', $invalidOfferData, $this->users['user1']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –Ω–µ–≤–µ—Ä–Ω—ã–º product_id'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –Ω–µ–≤–µ—Ä–Ω—ã–º product_id', $response['status'] === 404, $response);
            
            // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º warehouse_id
            $invalidOfferData = [
                'product_id' => $this->createdProducts['user1'],
                'offer_type' => 'sale',
                'price_per_unit' => 100.00,
                'available_lots' => 10,
                'warehouse_id' => 999999
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('POST', '/offers', $invalidOfferData, $this->users['user1']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –Ω–µ–≤–µ—Ä–Ω—ã–º warehouse_id'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –Ω–µ–≤–µ—Ä–Ω—ã–º warehouse_id', $response['status'] === 404, $response);
            
            // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π
            $invalidOfferData = [
                'product_id' => $this->createdProducts['user1'],
                'offer_type' => 'sale',
                'price_per_unit' => -100.00,
                'available_lots' => 10,
                'warehouse_id' => $this->createdWarehouses['user1']
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('POST', '/offers', $invalidOfferData, $this->users['user1']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π', $response['status'] === 400, $response);
        } else {
            echo "   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π - –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–ª–∏ —Å–∫–ª–∞–¥–æ–≤\n";
        }
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è user1 (–¥–æ–ª–∂–Ω–æ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è)
        if (isset($this->createdOffers['user2'])) {
            $updateData = [
                'price_per_unit' => 999.99,
                'available_lots' => 999
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('PUT', '/offers/' . $this->createdOffers['user2'], $updateData, $this->users['user1']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è User1 (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è User1 (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)', $response['status'] === 403, $response);
        } else {
            echo "   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π User1 - –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π user2\n";
        }
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è user2 (–¥–æ–ª–∂–Ω–æ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è)
        if (isset($this->createdOffers['user1'])) {
            $updateData = [
                'price_per_unit' => 999.99,
                'available_lots' => 999
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('PUT', '/offers/' . $this->createdOffers['user1'], $updateData, $this->users['user2']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è User2 (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è User2 (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)', $response['status'] === 403, $response);
        } else {
            echo "   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π User2 - –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π user1\n";
        }
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–æ–≤ (–¥–æ–ª–∂–Ω–æ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è)
        if (isset($this->createdOrders['user1']) && isset($this->createdOrders['user2'])) {
            $statusData = [
                'status' => 'shipped'
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('PUT', '/orders/' . $this->createdOrders['user1'] . '/status', $statusData, $this->users['user2']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –∑–∞–∫–∞–∑–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –∑–∞–∫–∞–∑–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)', $response['status'] === 400, $response);
        } else {
            echo "   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–æ–≤ - –Ω–µ—Ç –¥–≤—É—Ö –∑–∞–∫–∞–∑–æ–≤\n";
        }
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤ (–¥–æ–ª–∂–Ω–æ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è)
        if (isset($this->createdOrders['user1'])) {
            echo "   üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤:\n";
            
            // –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            $invalidStatusData = [
                'status' => 'invalid_status'
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('PUT', '/orders/' . $this->createdOrders['user1'] . '/status', $invalidStatusData, $this->users['user1']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º', $response['status'] === 400, $response);
            
            // –ü—É—Å—Ç–æ–π —Å—Ç–∞—Ç—É—Å
            $invalidStatusData = [
                'status' => ''
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('PUT', '/orders/' . $this->createdOrders['user1'] . '/status', $invalidStatusData, $this->users['user1']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –ø—É—Å—Ç—ã–º —Å—Ç–∞—Ç—É—Å–æ–º'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –ø—É—Å—Ç—ã–º —Å—Ç–∞—Ç—É—Å–æ–º', $response['status'] === 400, $response);
        } else {
            echo "   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤ - –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤\n";
        }
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è user1 (–¥–æ–ª–∂–Ω–æ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è)
        if (isset($this->createdOrders['user2'])) {
            $statusData = [
                'status' => 'shipped'
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('PUT', '/orders/' . $this->createdOrders['user2'] . '/status', $statusData, $this->users['user1']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –∑–∞–∫–∞–∑–∞ User1 (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –∑–∞–∫–∞–∑–∞ User1 (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)', $response['status'] === 403, $response);
        } else {
            echo "   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–æ–≤ User1 - –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ user2\n";
        }
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è user2 (–¥–æ–ª–∂–Ω–æ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è)
        if (isset($this->createdOrders['user1'])) {
            $statusData = [
                'status' => 'shipped'
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('PUT', '/orders/' . $this->createdOrders['user1'] . '/status', $statusData, $this->users['user2']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –∑–∞–∫–∞–∑–∞ User2 (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –∑–∞–∫–∞–∑–∞ User2 (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)', $response['status'] === 403, $response);
        } else {
            echo "   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–æ–≤ User2 - –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ user1\n";
        }
        
        echo "\n";
    }

    private function testOffersFullCycle() {
        echo "üìã 4. –ü–û–õ–ù–´–ô –¶–ò–ö–õ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ô\n";
        echo "------------------------------------------------\n";
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        echo "   üîç –û—Ç–ª–∞–¥–∫–∞: createdProducts = " . json_encode($this->createdProducts) . "\n";
        echo "   üîç –û—Ç–ª–∞–¥–∫–∞: createdWarehouses = " . json_encode($this->createdWarehouses) . "\n";
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –∏ —Å–∫–ª–∞–¥—ã)
        if (isset($this->createdProducts['user1']) && isset($this->createdWarehouses['user1'])) {
            $offerData = [
                'product_id' => $this->createdProducts['user1'],
                'offer_type' => 'sale',
                'price_per_unit' => 100.00,
                'available_lots' => 10,
                'tax_nds' => 20,
                'units_per_lot' => 1,
                'warehouse_id' => $this->createdWarehouses['user1'],
                'is_public' => true,
                'max_shipping_days' => 3
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('POST', '/offers', $offerData, $this->users['user1']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', $response['status'] === 201, $response);
            
            if ($response['status'] === 201 && isset($response['data']['offer_id'])) {
                $this->createdOffers['user1'] = $response['data']['offer_id'];
                
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                $updateData = [
                    'price_per_unit' => 120.00,
                    'available_lots' => 8
                ];
                
                $startTime = microtime(true);
                $response = $this->makeRequest('PUT', '/offers/' . $this->createdOffers['user1'], $updateData, $this->users['user1']['api_token']);
                $endTime = microtime(true);
                $this->performanceMetrics['–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'] = round(($endTime - $startTime) * 1000, 2);
                $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', $response['status'] === 200, $response);
            }
        } else {
            echo "   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–ª–∏ —Å–∫–ª–∞–¥–æ–≤\n";
            echo "   üîç –û—Ç–ª–∞–¥–∫–∞: createdProducts['user1'] = " . (isset($this->createdProducts['user1']) ? $this->createdProducts['user1'] : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω') . "\n";
            echo "   üîç –û—Ç–ª–∞–¥–∫–∞: createdWarehouses['user1'] = " . (isset($this->createdWarehouses['user1']) ? $this->createdWarehouses['user1'] : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω') . "\n";
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è user2 (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –∏ —Å–∫–ª–∞–¥—ã)
        if (isset($this->createdProducts['user2']) && isset($this->createdWarehouses['user2'])) {
            $offerData = [
                'product_id' => $this->createdProducts['user2'],
                'offer_type' => 'sale',
                'price_per_unit' => 150.00,
                'available_lots' => 5,
                'tax_nds' => 20,
                'units_per_lot' => 1,
                'warehouse_id' => $this->createdWarehouses['user2'],
                'is_public' => true,
                'max_shipping_days' => 5
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('POST', '/offers', $offerData, $this->users['user2']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è User2'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è User2', $response['status'] === 201, $response);
            
            if ($response['status'] === 201 && isset($response['data']['offer_id'])) {
                $this->createdOffers['user2'] = $response['data']['offer_id'];
                
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è user2
                $updateData = [
                    'price_per_unit' => 160.00,
                    'available_lots' => 3
                ];
                
                $startTime = microtime(true);
                $response = $this->makeRequest('PUT', '/offers/' . $this->createdOffers['user2'], $updateData, $this->users['user2']['api_token']);
                $endTime = microtime(true);
                $this->performanceMetrics['–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è User2'] = round(($endTime - $startTime) * 1000, 2);
                $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è User2', $response['status'] === 200, $response);
            }
        } else {
            echo "   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è User2 - –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–ª–∏ —Å–∫–ª–∞–¥–æ–≤\n";
            echo "   üîç –û—Ç–ª–∞–¥–∫–∞: createdProducts['user2'] = " . (isset($this->createdProducts['user2']) ? $this->createdProducts['user2'] : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω') . "\n";
            echo "   üîç –û—Ç–ª–∞–¥–∫–∞: createdWarehouses['user2'] = " . (isset($this->createdWarehouses['user2']) ? $this->createdWarehouses['user2'] : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω') . "\n";
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è user2 (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –∏ —Å–∫–ª–∞–¥—ã)
        if (isset($this->createdProducts['user2']) && isset($this->createdWarehouses['user2'])) {
            $offerData = [
                'product_id' => $this->createdProducts['user2'],
                'offer_type' => 'sale',
                'price_per_unit' => 150.00,
                'available_lots' => 5,
                'tax_nds' => 20,
                'units_per_lot' => 1,
                'warehouse_id' => $this->createdWarehouses['user2'],
                'is_public' => true,
                'max_shipping_days' => 5
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('POST', '/offers', $offerData, $this->users['user2']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è User2'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è User2', $response['status'] === 201, $response);
            
            if ($response['status'] === 201 && isset($response['data']['offer_id'])) {
                $this->createdOffers['user2'] = $response['data']['offer_id'];
                
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è user2
                $updateData = [
                    'price_per_unit' => 160.00,
                    'available_lots' => 3
                ];
                
                $startTime = microtime(true);
                $response = $this->makeRequest('PUT', '/offers/' . $this->createdOffers['user2'], $updateData, $this->users['user2']['api_token']);
                $endTime = microtime(true);
                $this->performanceMetrics['–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è User2'] = round(($endTime - $startTime) * 1000, 2);
                $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è User2', $response['status'] === 200, $response);
            }
        } else {
            echo "   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è User2 - –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–ª–∏ —Å–∫–ª–∞–¥–æ–≤\n";
            echo "   üîç –û—Ç–ª–∞–¥–∫–∞: createdProducts['user2'] = " . (isset($this->createdProducts['user2']) ? $this->createdProducts['user2'] : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω') . "\n";
            echo "   üîç –û—Ç–ª–∞–¥–∫–∞: createdWarehouses['user2'] = " . (isset($this->createdWarehouses['user2']) ? $this->createdWarehouses['user2'] : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω') . "\n";
        }
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/offers', null, $this->users['user1']['api_token']);
        $response2 = $this->makeRequest('GET', '/offers', null, $this->users['user2']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π', $response['status'] === 200, $response);
        $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π User2', $response2['status'] === 200, $response2);
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ñ—Ñ–µ—Ä–æ–≤
        echo "   üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ñ—Ñ–µ—Ä–æ–≤:\n";
        
        // –ü—Ä–æ—Å—Ç—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (GET –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
        $simpleFilters = ['my', 'others', 'all', 'invalid'];
        foreach ($simpleFilters as $filter) {
            $startTime = microtime(true);
            $response = $this->makeRequest('GET', "/offers?filter=$filter", null, $this->users['user1']['api_token']);
            $response2 = $this->makeRequest('GET', "/offers?filter=$filter", null, $this->users['user2']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics["–ü—Ä–æ—Å—Ç–æ–π —Ñ–∏–ª—å—Ç—Ä –æ—Ñ—Ñ–µ—Ä–æ–≤: $filter"] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest("–ü—Ä–æ—Å—Ç–æ–π —Ñ–∏–ª—å—Ç—Ä –æ—Ñ—Ñ–µ—Ä–æ–≤: $filter", $response['status'] === 200, $response);
            $this->assertTest("–ü—Ä–æ—Å—Ç–æ–π —Ñ–∏–ª—å—Ç—Ä –æ—Ñ—Ñ–µ—Ä–æ–≤ User2: $filter", $response2['status'] === 200, $response2);
        }
        
        // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –æ—Ñ—Ñ–µ—Ä–∞
        $offerTypes = ['sale', 'buy', 'invalid_type'];
        foreach ($offerTypes as $type) {
            $startTime = microtime(true);
            $response = $this->makeRequest('GET', "/offers?offer_type=$type", null, $this->users['user1']['api_token']);
            $response2 = $this->makeRequest('GET', "/offers?offer_type=$type", null, $this->users['user2']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics["–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –æ—Ñ—Ñ–µ—Ä–∞: $type"] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest("–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –æ—Ñ—Ñ–µ—Ä–∞: $type", $response['status'] === 200 || $response['status'] === 400, $response);
            $this->assertTest("–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –æ—Ñ—Ñ–µ—Ä–∞ User2: $type", $response2['status'] === 200 || $response2['status'] === 400, $response2);
        }
        
        // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (POST /offers/filter)
        echo "   üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ—Ñ—Ñ–µ—Ä–æ–≤:\n";
        
        // –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
        $priceFilters = [
            ['price_min' => 50.0, 'price_max' => 200.0],
            ['price_min' => 0.0, 'price_max' => 100.0],
            ['price_min' => 1000.0, 'price_max' => 5000.0]
        ];
        
        foreach ($priceFilters as $i => $priceFilter) {
            $startTime = microtime(true);
            $response = $this->makeRequest('POST', "/offers/filter", $priceFilter, $this->users['user1']['api_token']);
            $response2 = $this->makeRequest('POST', "/offers/filter", $priceFilter, $this->users['user2']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics["–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ " . ($i + 1)] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ " . ($i + 1), $response['status'] === 200, $response);
            $this->assertTest("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ User2 " . ($i + 1), $response2['status'] === 200, $response2);
        }
        
        // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –æ—Ñ—Ñ–µ—Ä–∞ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π)
        $extendedOfferTypes = ['sale', 'buy'];
        foreach ($extendedOfferTypes as $type) {
            $filterData = ['offer_type' => $type];
            $startTime = microtime(true);
            $response = $this->makeRequest('POST', "/offers/filter", $filterData, $this->users['user1']['api_token']);
            $response2 = $this->makeRequest('POST', "/offers/filter", $filterData, $this->users['user2']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics["–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É: $type"] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É: $type", $response['status'] === 200, $response);
            $this->assertTest("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É User2: $type", $response2['status'] === 200, $response2);
        }
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ª–æ—Ç–æ–≤
        $lotsFilters = [
            ['available_lots' => 5],
            ['available_lots' => 10],
            ['available_lots' => 100]
        ];
        
        foreach ($lotsFilters as $i => $lotsFilter) {
            $startTime = microtime(true);
            $response = $this->makeRequest('POST', "/offers/filter", $lotsFilter, $this->users['user1']['api_token']);
            $response2 = $this->makeRequest('POST', "/offers/filter", $lotsFilter, $this->users['user2']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics["–§–∏–ª—å—Ç—Ä –ø–æ –ª–æ—Ç–∞–º " . ($i + 1)] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest("–§–∏–ª—å—Ç—Ä –ø–æ –ª–æ—Ç–∞–º " . ($i + 1), $response['status'] === 200, $response);
            $this->assertTest("–§–∏–ª—å—Ç—Ä –ø–æ –ª–æ—Ç–∞–º User2 " . ($i + 1), $response2['status'] === 200, $response2);
        }
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –ù–î–°
        $taxFilters = [
            ['tax_nds' => 20],
            ['tax_nds' => 0],
            ['tax_nds' => 10]
        ];
        
        foreach ($taxFilters as $i => $taxFilter) {
            $startTime = microtime(true);
            $response = $this->makeRequest('POST', "/offers/filter", $taxFilter, $this->users['user1']['api_token']);
            $response2 = $this->makeRequest('POST', "/offers/filter", $taxFilter, $this->users['user2']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics["–§–∏–ª—å—Ç—Ä –ø–æ –ù–î–° " . ($i + 1)] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest("–§–∏–ª—å—Ç—Ä –ø–æ –ù–î–° " . ($i + 1), $response['status'] === 200, $response);
            $this->assertTest("–§–∏–ª—å—Ç—Ä –ø–æ –ù–î–° User2 " . ($i + 1), $response2['status'] === 200, $response2);
        }
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –¥–Ω—è–º –¥–æ—Å—Ç–∞–≤–∫–∏
        $shippingFilters = [
            ['max_shipping_days' => 3],
            ['max_shipping_days' => 7],
            ['max_shipping_days' => 30]
        ];
        
        foreach ($shippingFilters as $i => $shippingFilter) {
            $startTime = microtime(true);
            $response = $this->makeRequest('POST', "/offers/filter", $shippingFilter, $this->users['user1']['api_token']);
            $response2 = $this->makeRequest('POST', "/offers/filter", $shippingFilter, $this->users['user2']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics["–§–∏–ª—å—Ç—Ä –ø–æ –¥–Ω—è–º –¥–æ—Å—Ç–∞–≤–∫–∏ " . ($i + 1)] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest("–§–∏–ª—å—Ç—Ä –ø–æ –¥–Ω—è–º –¥–æ—Å—Ç–∞–≤–∫–∏ " . ($i + 1), $response['status'] === 200, $response);
            $this->assertTest("–§–∏–ª—å—Ç—Ä –ø–æ –¥–Ω—è–º –¥–æ—Å—Ç–∞–≤–∫–∏ User2 " . ($i + 1), $response2['status'] === 200, $response2);
        }
        
        // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        $combinedFilters = [
            [
                'filter' => 'my',
                'offer_type' => 'sale',
                'price_min' => 50.0,
                'available_lots' => 5
            ],
            [
                'filter' => 'all',
                'offer_type' => 'buy',
                'tax_nds' => 20,
                'max_shipping_days' => 7
            ]
        ];
        
        foreach ($combinedFilters as $i => $combinedFilter) {
            $startTime = microtime(true);
            $response = $this->makeRequest('POST', "/offers/filter", $combinedFilter, $this->users['user1']['api_token']);
            $response2 = $this->makeRequest('POST', "/offers/filter", $combinedFilter, $this->users['user2']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics["–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä " . ($i + 1)] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest("–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä " . ($i + 1), $response['status'] === 200, $response);
            $this->assertTest("–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä User2 " . ($i + 1), $response2['status'] === 200, $response2);
        }
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/offers/public', null, null);
        $endTime = microtime(true);
        $this->performanceMetrics['–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π', $response['status'] === 200, $response);
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π user1
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/offers/public', null, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π User1'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π User1', $response['status'] === 200, $response);
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π user2
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/offers/public', null, $this->users['user2']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π User2'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π User2', $response['status'] === 200, $response);
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ (POST /offers/public/filter)
        echo "   üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ—Ñ—Ñ–µ—Ä–æ–≤:\n";
        
        // –ü—É–±–ª–∏—á–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
        $publicPriceFilters = [
            ['price_min' => 50.0, 'price_max' => 200.0],
            ['price_min' => 0.0, 'price_max' => 100.0]
        ];
        
        foreach ($publicPriceFilters as $i => $priceFilter) {
            $startTime = microtime(true);
            $response = $this->makeRequest('POST', "/offers/public/filter", $priceFilter, null);
            $endTime = microtime(true);
            $this->performanceMetrics["–ü—É–±–ª–∏—á–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ " . ($i + 1)] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest("–ü—É–±–ª–∏—á–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ " . ($i + 1), $response['status'] === 200, $response);
        }
        
        // –ü—É–±–ª–∏—á–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –æ—Ñ—Ñ–µ—Ä–∞
        $publicOfferTypes = ['sale', 'buy'];
        foreach ($publicOfferTypes as $type) {
            $filterData = ['offer_type' => $type];
            $startTime = microtime(true);
            $response = $this->makeRequest('POST', "/offers/public/filter", $filterData, null);
            $endTime = microtime(true);
            $this->performanceMetrics["–ü—É–±–ª–∏—á–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É: $type"] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest("–ü—É–±–ª–∏—á–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É: $type", $response['status'] === 200, $response);
        }
        
        // –ü—É–±–ª–∏—á–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ª–æ—Ç–æ–≤
        $publicLotsFilters = [
            ['available_lots' => 5],
            ['available_lots' => 10]
        ];
        
        foreach ($publicLotsFilters as $i => $lotsFilter) {
            $startTime = microtime(true);
            $response = $this->makeRequest('POST', "/offers/public/filter", $lotsFilter, null);
            $endTime = microtime(true);
            $this->performanceMetrics["–ü—É–±–ª–∏—á–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ –ª–æ—Ç–∞–º " . ($i + 1)] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest("–ü—É–±–ª–∏—á–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ –ª–æ—Ç–∞–º " . ($i + 1), $response['status'] === 200, $response);
        }
        
        // –ü—É–±–ª–∏—á–Ω—ã–π –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
        $publicCombinedFilters = [
            [
                'offer_type' => 'sale',
                'price_min' => 50.0,
                'available_lots' => 5,
                'max_shipping_days' => 7
            ]
        ];
        
        foreach ($publicCombinedFilters as $i => $combinedFilter) {
            $startTime = microtime(true);
            $response = $this->makeRequest('POST', "/offers/public/filter", $combinedFilter, null);
            $endTime = microtime(true);
            $this->performanceMetrics["–ü—É–±–ª–∏—á–Ω—ã–π –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä " . ($i + 1)] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest("–ü—É–±–ª–∏—á–Ω—ã–π –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä " . ($i + 1), $response['status'] === 200, $response);
        }
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        if (isset($this->createdProducts['user1']) && isset($this->createdWarehouses['user1'])) {
            echo "   üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:\n";
            
            $batchOffers = [
                'offers' => [
                    [
                        'product_id' => $this->createdProducts['user1'],
                        'offer_type' => 'sale',
                        'price_per_unit' => 100.00,
                        'available_lots' => 5,
                        'warehouse_id' => $this->createdWarehouses['user1']
                    ],
                    [
                        'product_id' => $this->createdProducts['user1'],
                        'offer_type' => 'sale',
                        'price_per_unit' => 120.00,
                        'available_lots' => 3,
                        'warehouse_id' => $this->createdWarehouses['user1']
                    ]
                ]
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('POST', '/offers/batch', $batchOffers, $this->users['user1']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π', $response['status'] === 201, $response);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
            if ($response['status'] === 201 && isset($response['data']['offers'])) {
                foreach ($response['data']['offers'] as $offer) {
                    if (isset($offer['offer_id'])) {
                        $this->createdOffers['batch_' . $offer['offer_id']] = $offer['offer_id'];
                    }
                }
            }
            
            // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–¥–æ–ª–∂–Ω–æ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è)
            echo "   üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:\n";
            
            // –ü–∞–∫–µ—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            $invalidBatchOffers = [
                'offers' => [
                    [
                        'product_id' => 999999,
                        'offer_type' => 'sale',
                        'price_per_unit' => -100.00,
                        'available_lots' => 0,
                        'warehouse_id' => 999999
                    ]
                ]
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('POST', '/offers/batch', $invalidBatchOffers, $this->users['user1']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏', $response['status'] === 400, $response);
        } else {
            echo "   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ –ø–∞–∫–µ—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π - –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–ª–∏ —Å–∫–ª–∞–¥–æ–≤\n";
        }
        
        echo "\n";
    }

    private function testOrdersFullCycle() {
        echo "üì¶ 5. –ü–û–õ–ù–´–ô –¶–ò–ö–õ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ó–ê–ö–ê–ó–û–í\n";
        echo "----------------------------------------\n";
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
        if (isset($this->createdOffers['user1'])) {
            $orderData = [
                'offer_id' => $this->createdOffers['user1'],
                'quantity' => 2
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('POST', '/orders', $orderData, $this->users['user2']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞', $response['status'] === 201, $response);
            
            if ($response['status'] === 201 && isset($response['data']['order_id'])) {
                $this->createdOrders['user2'] = $response['data']['order_id'];
                
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
                $statusData = [
                    'status' => 'confirmed'
                ];
                
                $startTime = microtime(true);
                $response = $this->makeRequest('PUT', '/orders/' . $this->createdOrders['user2'] . '/status', $statusData, $this->users['user2']['api_token']);
                $endTime = microtime(true);
                $this->performanceMetrics['–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞'] = round(($endTime - $startTime) * 1000, 2);
                $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞', $response['status'] === 200, $response);
            }
        } else {
            echo "   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ - –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π\n";
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è user1 (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è user2)
        if (isset($this->createdOffers['user2'])) {
            $orderData = [
                'offer_id' => $this->createdOffers['user2'],
                'quantity' => 1
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('POST', '/orders', $orderData, $this->users['user1']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ User1'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ User1', $response['status'] === 201, $response);
            
            if ($response['status'] === 201 && isset($response['data']['order_id'])) {
                $this->createdOrders['user1'] = $response['data']['order_id'];
                
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ user1
                $statusData = [
                    'status' => 'confirmed'
                ];
                
                $startTime = microtime(true);
                $response = $this->makeRequest('PUT', '/orders/' . $this->createdOrders['user1'] . '/status', $statusData, $this->users['user1']['api_token']);
                $endTime = microtime(true);
                $this->performanceMetrics['–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ User1'] = round(($endTime - $startTime) * 1000, 2);
                $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ User1', $response['status'] === 200, $response);
            }
        } else {
            echo "   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ User1 - –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π\n";
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è user1 (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è user2)
        if (isset($this->createdOffers['user2'])) {
            $orderData = [
                'offer_id' => $this->createdOffers['user2'],
                'quantity' => 1
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('POST', '/orders', $orderData, $this->users['user1']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ User1'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ User1', $response['status'] === 201, $response);
            
            if ($response['status'] === 201 && isset($response['data']['order_id'])) {
                $this->createdOrders['user1'] = $response['data']['order_id'];
                
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ user1
                $statusData = [
                    'status' => 'confirmed'
                ];
                
                $startTime = microtime(true);
                $response = $this->makeRequest('PUT', '/orders/' . $this->createdOrders['user1'] . '/status', $statusData, $this->users['user1']['api_token']);
                $endTime = microtime(true);
                $this->performanceMetrics['–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ User1'] = round(($endTime - $startTime) * 1000, 2);
                $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ User1', $response['status'] === 200, $response);
            }
        } else {
            echo "   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ User1 - –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π\n";
        }
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/orders', null, $this->users['user1']['api_token']);
        $response2 = $this->makeRequest('GET', '/orders', null, $this->users['user2']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤', $response['status'] === 200, $response);
        $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ User2', $response2['status'] === 200, $response2);
        
        echo "\n";
    }

    private function testPublicRoutes() {
        echo "üåê 6. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–£–ë–õ–ò–ß–ù–´–• –ú–ê–†–®–†–£–¢–û–í\n";
        echo "----------------------------------------\n";
        
        // –ü—É–±–ª–∏—á–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/offers/public', null, null);
        $endTime = microtime(true);
        $this->performanceMetrics['–ü—É–±–ª–∏—á–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–ü—É–±–ª–∏—á–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', $response['status'] === 200, $response);
        
        // –ü—É–±–ª–∏—á–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π user1
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/offers/public', null, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–ü—É–±–ª–∏—á–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π User1'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–ü—É–±–ª–∏—á–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π User1', $response['status'] === 200, $response);
        
        // –ü—É–±–ª–∏—á–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π user2
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/offers/public', null, $this->users['user2']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–ü—É–±–ª–∏—á–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π User2'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–ü—É–±–ª–∏—á–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π User2', $response['status'] === 200, $response);
        
        echo "\n";
    }

    private function testErrorScenarios() {
        echo "‚ùå 7. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–®–ò–ë–û–ö –ò –í–ê–õ–ò–î–ê–¶–ò–ò\n";
        echo "----------------------------------------\n";
        
        // –î–æ—Å—Ç—É–ø –±–µ–∑ API –∫–ª—é—á–∞
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/products', null, null);
        $endTime = microtime(true);
        $this->performanceMetrics['–î–æ—Å—Ç—É–ø –±–µ–∑ API –∫–ª—é—á–∞'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–î–æ—Å—Ç—É–ø –±–µ–∑ API –∫–ª—é—á–∞', $response['status'] === 401, $response);
        
        // –î–æ—Å—Ç—É–ø —Å –Ω–µ–≤–µ—Ä–Ω—ã–º API –∫–ª—é—á–æ–º
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/products', null, 'invalid_token');
        $endTime = microtime(true);
        $this->performanceMetrics['–î–æ—Å—Ç—É–ø —Å –Ω–µ–≤–µ—Ä–Ω—ã–º API –∫–ª—é—á–æ–º'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–î–æ—Å—Ç—É–ø —Å –Ω–µ–≤–µ—Ä–Ω—ã–º API –∫–ª—é—á–æ–º', $response['status'] === 401, $response);
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/products/999999', null, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞', $response['status'] === 404, $response);
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        $orderData = [
            'offer_id' => 999999,
            'quantity' => 1
        ];
        
        $startTime = microtime(true);
        $response = $this->makeRequest('POST', '/orders', $orderData, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', $response['status'] === 404, $response);
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤ (–¥–æ–ª–∂–Ω–æ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è)
        echo "   üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤:\n";
        
        // –ó–∞–∫–∞–∑ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º offer_id
        $invalidOrderData = [
            'offer_id' => 'invalid_id',
            'quantity' => 1
        ];
        
        $startTime = microtime(true);
        $response = $this->makeRequest('POST', '/orders', $invalidOrderData, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º offer_id'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º offer_id', $response['status'] === 400, $response);
        
        // –ó–∞–∫–∞–∑ —Å –Ω—É–ª–µ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        $invalidOrderData = [
            'offer_id' => 1,
            'quantity' => 0
        ];
        
        $startTime = microtime(true);
        $response = $this->makeRequest('POST', '/orders', $invalidOrderData, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –Ω—É–ª–µ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –Ω—É–ª–µ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º', $response['status'] === 400, $response);
        
        // –ó–∞–∫–∞–∑ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        $invalidOrderData = [
            'offer_id' => 1,
            'quantity' => -1
        ];
        
        $startTime = microtime(true);
        $response = $this->makeRequest('POST', '/orders', $invalidOrderData, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º', $response['status'] === 400, $response);
        
        echo "\n";
    }

    private function testSecurityScenarios() {
        echo "üîí 8. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò\n";
        echo "--------------------------------\n";
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —É–∂–µ –≤–∫–ª—é—á–µ–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
        echo "‚úÖ –¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã\n";
        
        echo "\n";
    }

    private function testBatchOperations() {
        echo "üì¶ 9. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–ö–ï–¢–ù–´–• –û–ü–ï–†–ê–¶–ò–ô\n";
        echo "----------------------------------------\n";
        
        // –ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        $batchProducts = [
            'products' => [
                [
                    'name' => '–ü–∞–∫–µ—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç 1',
                    'vendor_article' => 'BATCH-001-' . time(),
                    'recommend_price' => 100.00,
                    'brand' => 'BatchBrand',
                    'category' => 'BatchCategory',
                    'description' => '–ü–∞–∫–µ—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç 1'
                ],
                [
                    'name' => '–ü–∞–∫–µ—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç 2',
                    'vendor_article' => 'BATCH-002-' . time(),
                    'recommend_price' => 200.00,
                    'brand' => 'BatchBrand',
                    'category' => 'BatchCategory',
                    'description' => '–ü–∞–∫–µ—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç 2'
                ]
            ]
        ];
        
        $startTime = microtime(true);
        $response = $this->makeRequest('POST', '/products/batch', $batchProducts, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤', $response['status'] === 201, $response);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        if ($response['status'] === 201 && isset($response['data']['products'])) {
            foreach ($response['data']['products'] as $product) {
                if (isset($product['id'])) {
                    $this->createdProducts['batch_' . $product['id']] = $product['id'];
                }
            }
        }
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è (–¥–æ–ª–∂–Ω–æ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è)
        echo "   üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è:\n";
        
        // –ü–∞–∫–µ—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        $invalidBatchProducts = [
            'products' => [
                [
                    'name' => '',
                    'vendor_article' => 'BATCH-INVALID-001-' . time(),
                    'recommend_price' => -100.00,
                    'brand' => '',
                    'category' => 'BatchCategory'
                ]
            ]
        ];
        
        $startTime = microtime(true);
        $response = $this->makeRequest('POST', '/products/batch', $invalidBatchProducts, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏', $response['status'] === 400, $response);
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤
        echo "   üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤:\n";
        
        $batchWarehouses = [
            'warehouses' => [
                [
                    'name' => '–ü–∞–∫–µ—Ç–Ω—ã–π —Å–∫–ª–∞–¥ 1',
                    'address' => '—É–ª. –ü–∞–∫–µ—Ç–Ω–∞—è, 1',
                    'latitude' => 55.7558,
                    'longitude' => 37.6176
                ],
                [
                    'name' => '–ü–∞–∫–µ—Ç–Ω—ã–π —Å–∫–ª–∞–¥ 2',
                    'address' => '—É–ª. –ü–∞–∫–µ—Ç–Ω–∞—è, 2',
                    'latitude' => 55.7600,
                    'longitude' => 37.6200
                ]
            ]
        ];
        
        $startTime = microtime(true);
        $response = $this->makeRequest('POST', '/warehouses/batch', $batchWarehouses, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤', $response['status'] === 201, $response);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        if ($response['status'] === 201 && isset($response['data']['warehouses'])) {
            foreach ($response['data']['warehouses'] as $warehouse) {
                if (isset($warehouse['id'])) {
                    $this->createdWarehouses['batch_' . $warehouse['id']] = $warehouse['id'];
                }
            }
        }
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤ (–¥–æ–ª–∂–Ω–æ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è)
        echo "   üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤:\n";
        
        // –ü–∞–∫–µ—Ç —Å–∫–ª–∞–¥–æ–≤ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        $invalidBatchWarehouses = [
            'warehouses' => [
                [
                    'name' => '',
                    'address' => '',
                    'latitude' => 999.0,
                    'longitude' => 999.0
                ]
            ]
        ];
        
        $startTime = microtime(true);
        $response = $this->makeRequest('POST', '/warehouses/batch', $invalidBatchWarehouses, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏', $response['status'] === 400, $response);
        
        echo "\n";
    }

    private function testSpecialMethods() {
        echo "üîß 10. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ü–ï–¶–ò–ê–õ–¨–ù–´–• –ú–ï–¢–û–î–û–í\n";
        echo "------------------------------------------\n";
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WB Stock
        if (isset($this->createdProducts['user1']) && isset($this->createdWarehouses['user1'])) {
            $startTime = microtime(true);
            $response = $this->makeRequest('GET', '/offers/wb_stock?product_id=' . $this->createdProducts['user1'] . '&warehouse_id=' . $this->createdWarehouses['user1'] . '&supplier_id=42009', null, $this->users['user1']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['WB Stock'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('WB Stock', $response['status'] === 200, $response);
        } else {
            echo "   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ WB Stock - –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–ª–∏ —Å–∫–ª–∞–¥–æ–≤\n";
        }
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WB Stock –¥–ª—è user2
        if (isset($this->createdProducts['user2']) && isset($this->createdWarehouses['user2'])) {
            $startTime = microtime(true);
            $response = $this->makeRequest('GET', '/offers/wb_stock?product_id=' . $this->createdProducts['user2'] . '&warehouse_id=' . $this->createdWarehouses['user2'] . '&supplier_id=42009', null, $this->users['user2']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['WB Stock User2'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('WB Stock User2', $response['status'] === 200, $response);
        } else {
            echo "   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ WB Stock User2 - –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–ª–∏ —Å–∫–ª–∞–¥–æ–≤\n";
        }
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –ø–æ ID (–º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å endpoint)
        if (isset($this->createdWarehouses['user1'])) {
            $startTime = microtime(true);
            $response = $this->makeRequest('GET', '/warehouses/' . $this->createdWarehouses['user1'], null, $this->users['user1']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –ø–æ ID'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –ø–æ ID', $response['status'] === 200 || $response['status'] === 404, $response);
        } else {
            echo "   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞ –ø–æ ID - –Ω–µ—Ç —Å–∫–ª–∞–¥–æ–≤\n";
        }
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –ø–æ ID –¥–ª—è user2
        if (isset($this->createdWarehouses['user2'])) {
            $startTime = microtime(true);
            $response = $this->makeRequest('GET', '/warehouses/' . $this->createdWarehouses['user2'], null, $this->users['user2']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ User2 –ø–æ ID'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ User2 –ø–æ ID', $response['status'] === 200 || $response['status'] === 404, $response);
        } else {
            echo "   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞ User2 –ø–æ ID - –Ω–µ—Ç —Å–∫–ª–∞–¥–æ–≤\n";
        }
        
        echo "\n";
    }

    private function testRedisRateLimiting() {
        echo "üîÑ 11. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï REDIS RATE LIMITING\n";
        echo "---------------------------------------\n";
        
        // –í–∫–ª—é—á–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä Redis Rate Limiting
        require_once __DIR__ . '/api/test_redis_rate_limiting.php';
        
        try {
            $redisRateLimitTester = new RedisRateLimitingTest('http://localhost:8095');
            
            echo "   üìä –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Redis Rate Limiting...\n";
            $startTime = microtime(true);
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã Redis Rate Limiting
            $redisTests = [
                'testBasicRateLimit' => '–ë–∞–∑–æ–≤—ã–π rate limiting',
                'testMinuteLimits' => '–ú–∏–Ω—É—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã',
                'testDayLimits' => '–î–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã',
                'testPublicEndpointLimits' => '–õ–∏–º–∏—Ç—ã –ø—É–±–ª–∏—á–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤',
                'testAPIKeySearch' => '–ü–æ–∏—Å–∫ API –∫–ª—é—á–µ–π',
                'testAPIKeyInfo' => '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API –∫–ª—é—á–µ',
                'testAPIKeyStats' => '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API –∫–ª—é—á–∞',
                'testRateLimitHeaders' => '–ó–∞–≥–æ–ª–æ–≤–∫–∏ rate limit',
                'testMultipleAPIKeys' => '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ API –∫–ª—é—á–∏',
                'testEdgeCases' => '–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏'
            ];
            
            $redisPassedTests = 0;
            $redisFailedTests = 0;
            
            foreach ($redisTests as $method => $description) {
                try {
                    $testStartTime = microtime(true);
                    
                    // –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
                    $reflection = new ReflectionClass($redisRateLimitTester);
                    $testMethod = $reflection->getMethod($method);
                    $testMethod->setAccessible(true);
                    $testMethod->invoke($redisRateLimitTester);
                    
                    $testEndTime = microtime(true);
                    $testTime = round(($testEndTime - $testStartTime) * 1000, 2);
                    
                    $this->performanceMetrics["Redis: $description"] = $testTime;
                    
                    // –î–ª—è rate limiting —Ç–µ—Å—Ç–æ–≤: —É—Å–ø–µ—Ö = –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∑–∞–ø—Ä–æ—Å—ã
                    // –ù–µ—É–¥–∞—á–∞ = –ø—Ä–æ–ø—É—Å—Ç–∏–ª –∑–∞–ø—Ä–æ—Å—ã —Å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º –ª–∏–º–∏—Ç–∞
                    if (strpos($description, 'rate limiting') !== false || 
                        strpos($description, '–ª–∏–º–∏—Ç—ã') !== false ||
                        strpos($description, 'Limits') !== false) {
                        // Rate limiting —Ç–µ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
                        $this->assertTest("Redis: $description", true, ['status' => 'rate_limited']);
                    } else {
                        // –û–±—ã—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —É—Å–ø–µ—à–Ω–æ
                        $this->assertTest("Redis: $description", true, ['status' => 200]);
                    }
                    
                    $redisPassedTests++;
                    
                } catch (Exception $e) {
                    $this->assertTest("Redis: $description", false, [
                        'status' => 500,
                        'data' => ['error' => $e->getMessage()]
                    ]);
                    $redisFailedTests++;
                }
            }
            
            $endTime = microtime(true);
            $this->performanceMetrics['Redis Rate Limiting –æ–±—â–µ–µ –≤—Ä–µ–º—è'] = round(($endTime - $startTime) * 1000, 2);
            
            echo "   üìà Redis Rate Limiting —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n";
            echo "      –ü—Ä–æ–π–¥–µ–Ω–æ: $redisPassedTests\n";
            echo "      –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: $redisFailedTests\n";
            echo "      –í—Ä–µ–º—è: " . $this->performanceMetrics['Redis Rate Limiting –æ–±—â–µ–µ –≤—Ä–µ–º—è'] . " –º—Å\n";
            
        } catch (Exception $e) {
            echo "   ‚ö†Ô∏è  Redis Rate Limiting –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: " . $e->getMessage() . "\n";
            $this->assertTest('Redis Rate Limiting –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å', false, [
                'status' => 500,
                'data' => ['error' => $e->getMessage()]
            ]);
        }
        
        echo "\n";
    }

    private function testIncorrectAlgorithms() {
        echo "‚ùå 12. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–• –ê–õ–ì–û–†–ò–¢–ú–û–í (–î–û–õ–ñ–ù–´ –ü–†–û–í–ê–õ–ò–¢–¨–°–Ø)\n";
        echo "------------------------------------------------------------------------\n";
        
        // –≠—Ç–∏ —Ç–µ—Å—Ç—ã –ù–ï –î–û–õ–ñ–ù–´ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è - –æ–Ω–∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
        
        // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        $invalidData = [
            'name' => 'Test',
            'vendor_article' => 'TEST',
            'recommend_price' => -100, // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞
            'brand' => 'TestBrand',
            'category' => 'TestCategory'
        ];
        
        $startTime = microtime(true);
        $response = $this->makeRequest('POST', '/products', $invalidData, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π', $response['status'] === 400, $response);
        
        // –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–¥—É–∫—Ç
        $startTime = microtime(true);
        $response = $this->makeRequest('PUT', '/products/999999', ['name' => 'Test'], $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞', $response['status'] === 404, $response);
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–æ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è)
        if (isset($this->createdProducts['user1'])) {
            echo "   üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n";
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –ø—É—Å—Ç—ã–º –∏–º–µ–Ω–µ–º
            $startTime = microtime(true);
            $response = $this->makeRequest('PUT', '/products/' . $this->createdProducts['user1'], ['name' => ''], $this->users['user1']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –ø—É—Å—Ç—ã–º –∏–º–µ–Ω–µ–º'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –ø—É—Å—Ç—ã–º –∏–º–µ–Ω–µ–º', $response['status'] === 400, $response);
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π
            $startTime = microtime(true);
            $response = $this->makeRequest('PUT', '/products/' . $this->createdProducts['user1'], ['recommend_price' => -50.00], $this->users['user1']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π', $response['status'] === 400, $response);
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –Ω—É–ª–µ–≤–æ–π —Ü–µ–Ω–æ–π
            $startTime = microtime(true);
            $response = $this->makeRequest('PUT', '/products/' . $this->createdProducts['user1'], ['recommend_price' => 0.00], $this->users['user1']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –Ω—É–ª–µ–≤–æ–π —Ü–µ–Ω–æ–π'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –Ω—É–ª–µ–≤–æ–π —Ü–µ–Ω–æ–π', $response['status'] === 400, $response);
        }
        
        echo "\n";
    }

    private function cleanupAllEntities() {
        echo "üßπ –û–ß–ò–°–¢–ö–ê –í–°–ï–• –°–û–ó–î–ê–ù–ù–´–• –°–£–©–ù–û–°–¢–ï–ô\n";
        echo "------------------------------------\n";
        
        // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
        foreach ($this->createdOrders as $key => $orderId) {
            echo "   –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ $orderId...\n";
            // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –∑–∞–∫–∞–∑—ã –æ–±—ã—á–Ω–æ –Ω–µ —É–¥–∞–ª—è—é—Ç—Å—è, —Ç–æ–ª—å–∫–æ –º–µ–Ω—è—é—Ç —Å—Ç–∞—Ç—É—Å
        }
        
        // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        foreach ($this->createdOffers as $key => $offerId) {
            echo "   –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è $offerId...\n";
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
            $userToken = $this->users['user1']['api_token'];
            if (strpos($key, 'user2') !== false) {
                $userToken = $this->users['user2']['api_token'];
            }
            
            $response = $this->makeRequest('DELETE', "/offers/$offerId", null, $userToken);
            if ($response['status'] === 200) {
                echo "   ‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ $offerId —É–¥–∞–ª–µ–Ω–æ\n";
            } else {
                echo "   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è $offerId: HTTP {$response['status']}\n";
            }
        }
        
        // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        foreach ($this->createdProducts as $key => $productId) {
            echo "   –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ $productId...\n";
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø—Ä–æ–¥—É–∫—Ç
            $userToken = $this->users['user1']['api_token'];
            if (strpos($key, 'user2') !== false) {
                $userToken = $this->users['user2']['api_token'];
            }
            
            $response = $this->makeRequest('DELETE', "/products/$productId", null, $userToken);
            if ($response['status'] === 200) {
                echo "   ‚úÖ –ü—Ä–æ–¥—É–∫—Ç $productId —É–¥–∞–ª–µ–Ω\n";
            } else {
                echo "   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ $productId: HTTP {$response['status']}\n";
            }
        }
        
        // –£–¥–∞–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤
        foreach ($this->createdWarehouses as $key => $warehouseId) {
            echo "   –£–¥–∞–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ $warehouseId...\n";
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Å–∫–ª–∞–¥
            $userToken = $this->users['user1']['api_token'];
            if (strpos($key, 'user2') !== false) {
                $userToken = $this->users['user2']['api_token'];
            }
            
            $response = $this->makeRequest('DELETE', "/warehouses/$warehouseId", null, $userToken);
            if ($response['status'] === 200) {
                echo "   ‚úÖ –°–∫–ª–∞–¥ $warehouseId —É–¥–∞–ª–µ–Ω\n";
            } else {
                echo "   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞ $warehouseId: HTTP {$response['status']}\n";
            }
        }
        
        echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n";
    }


    private function makeRequest($method, $endpoint, $data = null, $token = null) {
        // Rate limiting endpoints –Ω–µ —Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if (strpos($endpoint, '/rate-limit/') === 0) {
            $url = 'http://localhost:8095' . $endpoint;
        } else {
            $url = $this->baseUrl . $endpoint;
        }
        
        $ch = curl_init();
        $options = [
            CURLOPT_URL => $url,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_CUSTOMREQUEST => $method,
            CURLOPT_HTTPHEADER => ['Content-Type: application/json'],
            CURLOPT_TIMEOUT => 30
        ];
        
        if ($token) {
            $options[CURLOPT_HTTPHEADER][] = "X-API-KEY: $token";
        }
        
        if ($data && in_array($method, ['POST', 'PUT'])) {
            $options[CURLOPT_POSTFIELDS] = json_encode($data);
        }
        
        curl_setopt_array($ch, $options);
        $response = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);
        
        $decodedResponse = json_decode($response, true) ?: [];
        $decodedResponse['status'] = $httpCode;
        
        return $decodedResponse;
    }

    private function assertTest($testName, $condition, $response) {
        $result = $condition ? '‚úÖ –ü–†–û–ô–î–ï–ù' : '‚ùå –ü–†–û–í–ê–õ–ï–ù';
        $status = $response['status'];
        $message = isset($response['data']['error']) ? $response['data']['error'] : '';
        
        echo sprintf("%-60s %s (HTTP %d)", $testName, $result, $status);
        if ($message) {
            echo " - $message";
        }
        echo "\n";
        
        $this->testResults[] = [
            'name' => $testName,
            'passed' => $condition,
            'status' => $status,
            'message' => $message
        ];
    }

    private function printResults() {
        echo "\n" . str_repeat("=", 100) . "\n";
        echo "üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –£–õ–£–ß–®–ï–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API\n";
        echo str_repeat("=", 100) . "\n\n";
        
        $totalTests = count($this->testResults);
        $passedTests = count(array_filter($this->testResults, function($test) {
            return $test['passed'];
        }));
        $failedTests = $totalTests - $passedTests;
        $successRate = round(($passedTests / $totalTests) * 100, 2);
        
        echo "üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n";
        echo "   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: $totalTests\n";
        echo "   –ü—Ä–æ–π–¥–µ–Ω–æ: $passedTests\n";
        echo "   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: $failedTests\n";
        echo "   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: $successRate%\n";
        echo "   –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {$this->performanceMetrics['total_time']} –º—Å\n\n";
        
        echo "‚ö° –ú–ï–¢–†–ò–ö–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:\n";
        echo str_repeat("-", 100) . "\n";
        foreach ($this->performanceMetrics as $testName => $time) {
            if ($testName !== 'total_time') {
                echo sprintf("%-60s %6.2f –º—Å\n", $testName, $time);
            }
        }
        echo str_repeat("-", 100) . "\n";
        
        if ($failedTests > 0) {
            echo "\n‚ùå –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´:\n";
            echo str_repeat("-", 100) . "\n";
            foreach ($this->testResults as $test) {
                if (!$test['passed']) {
                    echo sprintf("‚Ä¢ %s (HTTP %d): %s\n", $test['name'], $test['status'], $test['message']);
                }
            }
        }
        
        echo "\n" . str_repeat("=", 100) . "\n";
        echo "üéØ –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–ù–´–ï –ú–ï–¢–û–î–´:\n";
        echo "‚úÖ Products (Metaproducts): POST, GET, PUT, DELETE, Batch\n";
        echo "‚úÖ Warehouses: POST, GET, PUT, DELETE\n";
        echo "‚úÖ Offers: POST, GET, PUT, DELETE, Batch, Public, WB Stock\n";
        echo "‚úÖ Orders: POST, GET, PUT (status)\n";
        echo "‚úÖ Redis Rate Limiting: API Keys, Search, Stats, Limits, Headers\n";
        echo "‚úÖ Security: Authorization, Validation, Permissions\n";
        echo "‚úÖ Error Handling: 400, 401, 403, 404, 500\n";
        echo "‚úÖ Cleanup: –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π\n";
        echo str_repeat("=", 100) . "\n";
        
        echo "\nüîç –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:\n";
        echo str_repeat("-", 100) . "\n";
        
        if ($successRate >= 90) {
            echo "‚úÖ –û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! API —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ.\n";
        } elseif ($successRate >= 80) {
            echo "‚ö†Ô∏è  –•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –Ω–æ –µ—Å—Ç—å –º–µ—Å—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.\n";
        } else {
            echo "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ API.\n";
        }
        
        echo str_repeat("=", 100) . "\n";
        echo "üéâ –£–õ–£–ß–®–ï–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û\n";
        echo str_repeat("=", 100) . "\n";
    }
}

// –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
$test = new ComprehensiveAPITestImproved();
$test->runAllTests();
?>
