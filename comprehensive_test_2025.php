<?php
/**
 * COMPREHENSIVE API TEST 2025
 * –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π PortalData API
 * –í–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –º–µ–¥–∏–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
 */

class ComprehensiveAPITest2025 {
    private $baseUrl = 'http://localhost:8095/api/v1';
    private $apiKey = '026b26ac7a206c51a216b3280042cda5178710912da68ae696a713970034dd5f';
    private $testResults = [];
    private $createdIds = [];
    private $performanceData = [];
    private $startTime;

    public function run() {
        $this->startTime = microtime(true);
        
        echo "üöÄ COMPREHENSIVE API TEST 2025\n";
        echo "===============================\n";
        echo "–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: " . date('Y-m-d H:i:s') . "\n";
        echo "API URL: {$this->baseUrl}\n";
        echo "API Key: " . substr($this->apiKey, 0, 20) . "...\n\n";

        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
        $this->testServerAvailability();
        
        // 2. –¢–µ—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (—Å –º–µ–¥–∏–∞)
        $this->testProducts();
        
        // 3. –¢–µ—Å—Ç —Å–∫–ª–∞–¥–æ–≤
        $this->testWarehouses();
        
        // 4. –¢–µ—Å—Ç –æ—Ñ—Ñ–µ—Ä–æ–≤
        $this->testOffers();
        
        // 5. –¢–µ—Å—Ç –∑–∞–∫–∞–∑–æ–≤
        $this->testOrders();
        
        // 6. –¢–µ—Å—Ç –ø—É–±–ª–∏—á–Ω—ã—Ö endpoints
        $this->testPublicEndpoints();
        
        // 7. –¢–µ—Å—Ç –æ—à–∏–±–æ–∫ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        $this->testErrorHandling();
        
        // 8. –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        $this->testPerformance();
        
        // 9. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        $this->cleanupTestData();
        
        // 10. –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        $this->printResults();
    }

    private function testServerAvailability() {
        echo "üîç 1. –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –°–ï–†–í–ï–†–ê\n";
        echo "------------------------------------\n";
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ endpoint
        $response = $this->makeRequest('GET', '');
        $this->assertTest('–û—Å–Ω–æ–≤–Ω–æ–π endpoint', $response['status'] === 200, $response);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ Swagger
        $response = $this->makeRequest('GET', '/swagger/index.html');
        $this->assertTest('Swagger UI', $response['status'] === 200, $response);
        
        echo "\n";
    }

    private function testProducts() {
        echo "üì¶ 2. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–î–£–ö–¢–û–í\n";
        echo "------------------------------\n";
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –±–µ–∑ –º–µ–¥–∏–∞
        $productData = [
            'name' => '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç ' . time(),
            'vendor_article' => 'TEST-' . time(),
            'recommend_price' => 1500.50,
            'brand' => 'TestBrand',
            'category' => 'TestCategory',
            'description' => '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞'
        ];
        
        $response = $this->makeRequest('POST', '/products', $productData);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞', $response['status'] === 201, $response);
        
        if ($response['status'] === 201) {
            $this->createdIds['product'] = $response['data']['id'];
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –º–µ–¥–∏–∞ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        $productWithMedia = [
            'name' => '–ü—Ä–æ–¥—É–∫—Ç —Å –º–µ–¥–∏–∞ ' . time(),
            'vendor_article' => 'MEDIA-' . time(),
            'recommend_price' => 2500.00,
            'brand' => 'MediaBrand',
            'category' => 'MediaCategory',
            'description' => '–ü—Ä–æ–¥—É–∫—Ç —Å –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º',
            'image_urls' => [
                'https://example.com/image1.jpg',
                'https://example.com/image2.jpg'
            ],
            'video_urls' => [
                'https://example.com/video1.mp4'
            ],
            'model_3d_urls' => [
                'https://example.com/model1.glb'
            ]
        ];
        
        $response = $this->makeRequest('POST', '/products', $productWithMedia);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –º–µ–¥–∏–∞', $response['status'] === 201, $response);
        
        if ($response['status'] === 201) {
            $this->createdIds['product_with_media'] = $response['data']['id'];
        }
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        $response = $this->makeRequest('GET', '/products');
        $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤', $response['status'] === 200, $response);
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
        if (isset($this->createdIds['product'])) {
            $response = $this->makeRequest('GET', '/products/' . $this->createdIds['product']);
            $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ ID', $response['status'] === 200, $response);
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
        if (isset($this->createdIds['product'])) {
            $updateData = [
                'name' => '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç ' . time(),
                'description' => '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ'
            ];
            
            $response = $this->makeRequest('PUT', '/products/' . $this->createdIds['product'], $updateData);
            $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞', $response['status'] === 200, $response);
        }
        
        // –ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        $batchData = [
            'products' => [
                [
                    'name' => '–ü–∞–∫–µ—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç 1',
                    'vendor_article' => 'BATCH-001-' . time(),
                    'recommend_price' => 100.00,
                    'brand' => 'BatchBrand',
                    'category' => 'BatchCategory',
                    'description' => '–ü–∞–∫–µ—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç 1'
                ],
                [
                    'name' => '–ü–∞–∫–µ—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç 2',
                    'vendor_article' => 'BATCH-002-' . time(),
                    'recommend_price' => 200.00,
                    'brand' => 'BatchBrand',
                    'category' => 'BatchCategory',
                    'description' => '–ü–∞–∫–µ—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç 2'
                ]
            ]
        ];
        
        $response = $this->makeRequest('POST', '/products/batch', $batchData);
        $this->assertTest('–ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤', $response['status'] === 201, $response);
        
        echo "\n";
    }

    private function testWarehouses() {
        echo "üè≠ 3. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ö–õ–ê–î–û–í\n";
        echo "----------------------------\n";
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞
        $warehouseData = [
            'name' => '–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫–ª–∞–¥ ' . time(),
            'address' => '—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 123',
            'latitude' => 55.7558,
            'longitude' => 37.6176,
            'contact_phone' => '+7-999-123-45-67',
            'contact_email' => 'warehouse@test.com'
        ];
        
        $response = $this->makeRequest('POST', '/warehouses', $warehouseData);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞', $response['status'] === 201, $response);
        
        if ($response['status'] === 201) {
            $this->createdIds['warehouse'] = $response['data']['id'];
        }
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤
        $response = $this->makeRequest('GET', '/warehouses');
        $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤', $response['status'] === 200, $response);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞
        if (isset($this->createdIds['warehouse'])) {
            $updateData = [
                'name' => '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–∫–ª–∞–¥ ' . time(),
                'contact_phone' => '+7-999-987-65-43'
            ];
            
            $response = $this->makeRequest('PUT', '/warehouses/' . $this->createdIds['warehouse'], $updateData);
            $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞', $response['status'] === 200, $response);
        }
        
        echo "\n";
    }

    private function testOffers() {
        echo "üìã 4. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–§–§–ï–†–û–í\n";
        echo "-----------------------------\n";
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞
        $offerData = [
            'product_id' => isset($this->createdIds['product']) ? $this->createdIds['product'] : 1,
            'warehouse_id' => isset($this->createdIds['warehouse']) ? $this->createdIds['warehouse'] : 1,
            'price_per_unit' => 1500.00,
            'tax_nds' => 20,
            'units_per_lot' => 1,
            'available_lots' => 10,
            'offer_type' => 'sale',
            'max_shipping_days' => 3
        ];
        
        $response = $this->makeRequest('POST', '/offers', $offerData);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞', $response['status'] === 201, $response);
        
        if ($response['status'] === 201) {
            $this->createdIds['offer'] = $response['data']['offer_id'];
        }
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤
        $response = $this->makeRequest('GET', '/offers');
        $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤', $response['status'] === 200, $response);
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞
        if (isset($this->createdIds['offer'])) {
            $response = $this->makeRequest('GET', '/offers/' . $this->createdIds['offer']);
            $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ –ø–æ ID', $response['status'] === 200, $response);
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞
        if (isset($this->createdIds['offer'])) {
            $updateData = [
                'price_per_unit' => 1600.00,
                'available_lots' => 15
            ];
            
            $response = $this->makeRequest('PUT', '/offers/' . $this->createdIds['offer'], $updateData);
            $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞', $response['status'] === 200, $response);
        }
        
        // –ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–æ–≤
        $batchOffersData = [
            'offers' => [
                [
                    'product_id' => isset($this->createdIds['product']) ? $this->createdIds['product'] : 1,
                    'warehouse_id' => isset($this->createdIds['warehouse']) ? $this->createdIds['warehouse'] : 1,
                    'price_per_unit' => 1000.00,
                    'tax_nds' => 20,
                    'units_per_lot' => 1,
                    'available_lots' => 5,
                    'offer_type' => 'sale',
                    'max_shipping_days' => 2
                ],
                [
                    'product_id' => isset($this->createdIds['product']) ? $this->createdIds['product'] : 1,
                    'warehouse_id' => isset($this->createdIds['warehouse']) ? $this->createdIds['warehouse'] : 1,
                    'price_per_unit' => 2000.00,
                    'tax_nds' => 20,
                    'units_per_lot' => 1,
                    'available_lots' => 8,
                    'offer_type' => 'buy',
                    'max_shipping_days' => 5
                ]
            ]
        ];
        
        $response = $this->makeRequest('POST', '/offers/batch', $batchOffersData);
        $this->assertTest('–ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–æ–≤', $response['status'] === 201, $response);
        
        echo "\n";
    }

    private function testOrders() {
        echo "üì¶ 5. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–ö–ê–ó–û–í\n";
        echo "-----------------------------\n";
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        $orderData = [
            'offer_id' => isset($this->createdIds['offer']) ? $this->createdIds['offer'] : 1,
            'quantity' => 2,
            'delivery_address' => '—É–ª. –ó–∞–∫–∞–∑–Ω–∞—è, 456',
            'contact_phone' => '+7-999-111-22-33',
            'contact_email' => 'order@test.com'
        ];
        
        $response = $this->makeRequest('POST', '/orders', $orderData);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞', $response['status'] === 201, $response);
        
        if ($response['status'] === 201) {
            $this->createdIds['order'] = $response['data']['id'];
        }
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
        $response = $this->makeRequest('GET', '/orders');
        $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤', $response['status'] === 200, $response);
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
        if (isset($this->createdIds['order'])) {
            $response = $this->makeRequest('GET', '/orders/' . $this->createdIds['order']);
            $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ ID', $response['status'] === 200, $response);
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
        if (isset($this->createdIds['order'])) {
            $statusData = [
                'status' => 'processing'
            ];
            
            $response = $this->makeRequest('PUT', '/orders/' . $this->createdIds['order'] . '/status', $statusData);
            $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞', $response['status'] === 200, $response);
        }
        
        echo "\n";
    }

    private function testPublicEndpoints() {
        echo "üåê 6. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–£–ë–õ–ò–ß–ù–´–• ENDPOINTS\n";
        echo "----------------------------------------\n";
        
        // –ü—É–±–ª–∏—á–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä—ã (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
        $response = $this->makeRequest('GET', '/offers/public', null, null);
        $this->assertTest('–ü—É–±–ª–∏—á–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä—ã', $response['status'] === 200, $response);
        
        // WB Stock
        $response = $this->makeRequest('GET', '/offers/wb_stock?product_id=1&warehouse_id=1&supplier_id=42009');
        $this->assertTest('WB Stock', $response['status'] === 200, $response);
        
        echo "\n";
    }

    private function testErrorHandling() {
        echo "‚ö†Ô∏è 7. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö\n";
        echo "--------------------------------------\n";
        
        // –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á
        $response = $this->makeRequest('GET', '/products', null, 'invalid_key');
        $this->assertTest('–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á', $response['status'] === 401, $response);
        
        // –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ—Å—É—Ä—Å
        $response = $this->makeRequest('GET', '/products/999999');
        $this->assertTest('–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–¥—É–∫—Ç', $response['status'] === 404, $response);
        
        // –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        $invalidData = [
            'name' => '', // –ø—É—Å—Ç–æ–µ –∏–º—è
            'vendor_article' => 'TEST'
        ];
        
        $response = $this->makeRequest('POST', '/products', $invalidData);
        $this->assertTest('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞', $response['status'] === 400, $response);
        
        // –ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥
        $response = $this->makeRequest('PATCH', '/products/1');
        $this->assertTest('–ù–µ–≤–µ—Ä–Ω—ã–π HTTP –º–µ—Ç–æ–¥', $response['status'] === 404, $response);
        
        echo "\n";
    }

    private function testPerformance() {
        echo "‚ö° 8. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò\n";
        echo "--------------------------------------\n";
        
        // –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        $startTime = microtime(true);
        for ($i = 0; $i < 5; $i++) {
            $this->makeRequest('GET', '/products');
        }
        $endTime = microtime(true);
        $avgTime = (($endTime - $startTime) / 5) * 1000;
        
        $this->performanceData['–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤'] = round($avgTime, 2);
        $this->assertTest('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤', $avgTime < 1000, ['time' => $avgTime]);
        
        // –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤
        $startTime = microtime(true);
        for ($i = 0; $i < 5; $i++) {
            $this->makeRequest('GET', '/offers/public');
        }
        $endTime = microtime(true);
        $avgTime = (($endTime - $startTime) / 5) * 1000;
        
        $this->performanceData['–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ –ø—É–±–ª–∏—á–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤'] = round($avgTime, 2);
        $this->assertTest('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—É–±–ª–∏—á–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤', $avgTime < 1000, ['time' => $avgTime]);
        
        echo "\n";
    }

    private function cleanupTestData() {
        echo "üßπ 9. –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•\n";
        echo "--------------------------------\n";
        
        // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        if (isset($this->createdIds['order'])) {
            $response = $this->makeRequest('DELETE', '/orders/' . $this->createdIds['order']);
            $this->assertTest('–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞', $response['status'] === 200, $response);
        }
        
        if (isset($this->createdIds['offer'])) {
            $response = $this->makeRequest('DELETE', '/offers/' . $this->createdIds['offer']);
            $this->assertTest('–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞', $response['status'] === 200, $response);
        }
        
        if (isset($this->createdIds['product'])) {
            $response = $this->makeRequest('DELETE', '/products/' . $this->createdIds['product']);
            $this->assertTest('–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞', $response['status'] === 200, $response);
        }
        
        if (isset($this->createdIds['warehouse'])) {
            $response = $this->makeRequest('DELETE', '/warehouses/' . $this->createdIds['warehouse']);
            $this->assertTest('–£–¥–∞–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞', $response['status'] === 200, $response);
        }
        
        echo "\n";
    }

    private function makeRequest($method, $endpoint, $data = null, $apiKey = null) {
        $url = $this->baseUrl . $endpoint;
        $apiKey = $apiKey ?: $this->apiKey;
        
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_TIMEOUT, 10);
        curl_setopt($ch, CURLOPT_HTTPHEADER, [
            'Authorization: Bearer ' . $apiKey,
            'Content-Type: application/json'
        ]);
        
        if ($method === 'POST') {
            curl_setopt($ch, CURLOPT_POST, true);
            if ($data) {
                curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
            }
        } elseif ($method === 'PUT') {
            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');
            if ($data) {
                curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
            }
        } elseif ($method === 'DELETE') {
            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
        }
        
        $response = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);
        
        return [
            'status' => $httpCode,
            'data' => json_decode($response, true),
            'raw' => $response
        ];
    }

    private function assertTest($testName, $condition, $response) {
        $status = $condition ? '‚úÖ' : '‚ùå';
        echo "$status $testName\n";
        
        if (!$condition) {
            echo "   –û—à–∏–±–∫–∞: " . ($response['raw'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') . "\n";
        }
        
        $this->testResults[] = [
            'name' => $testName,
            'passed' => $condition,
            'response' => $response
        ];
    }

    private function printResults() {
        $endTime = microtime(true);
        $totalTime = round(($endTime - $this->startTime) * 1000, 2);
        
        echo "üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø\n";
        echo "==========================\n";
        
        $passed = 0;
        $total = count($this->testResults);
        
        foreach ($this->testResults as $result) {
            if ($result['passed']) {
                $passed++;
            }
        }
        
        $successRate = round(($passed / $total) * 100, 2);
        
        echo "–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: $total\n";
        echo "–ü—Ä–æ–π–¥–µ–Ω–æ: $passed\n";
        echo "–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: " . ($total - $passed) . "\n";
        echo "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {$successRate}%\n";
        echo "–û–±—â–µ–µ –≤—Ä–µ–º—è: {$totalTime}ms\n\n";
        
        echo "üìà –ú–ï–¢–†–ò–ö–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:\n";
        foreach ($this->performanceData as $metric => $value) {
            echo "$metric: {$value}ms\n";
        }
        
        echo "\nüéØ –°–¢–ê–¢–£–° API:\n";
        if ($successRate >= 90) {
            echo "üü¢ –û–¢–õ–ò–ß–ù–û - API —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ\n";
        } elseif ($successRate >= 70) {
            echo "üü° –•–û–†–û–®–û - –ï—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã\n";
        } else {
            echo "üî¥ –ü–õ–û–•–û - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ API\n";
        }
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
$test = new ComprehensiveAPITest2025();
$test->run();
?> 