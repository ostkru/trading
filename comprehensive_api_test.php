<?php
/**
 * –ü–û–õ–ù–´–ô –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –í–°–ï–• –ú–ï–¢–û–î–û–í API PortalData
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ endpoints —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
 */

class ComprehensiveAPITest {
    private $baseUrl = 'http://localhost:8095/api/v1';
    private $users = [
        'user1' => [
            'name' => 'clear13808',
            'api_token' => '80479fe392866b79e55c1640c107ee96c6aa25b7f8acf627a5ef226a5d8d1a27'
        ],
        'user2' => [
            'name' => 'veriy47043', 
            'api_token' => 'f9c912b6989eb166ee48ec6d8f07a2b0d29d5efc8ae1c2e44fac9fe8c4d4a0b5'
        ],
        'user3' => [
            'name' => '5ij48m4gcm',
            'api_token' => '00601582c3163466e0fece95d8e2315cb1c66814066ad8e0566d2813614d9001'
        ]
    ];
    
    private $testResults = [];
    private $createdProducts = [];
    private $createdOffers = [];
    private $createdOrders = [];
    private $createdWarehouses = [];
    private $performanceMetrics = [];

    public function runAllTests() {
        $totalStartTime = microtime(true);
        
        echo "üöÄ –ü–û–õ–ù–´–ô –¢–ï–°–¢ –í–°–ï–• –ú–ï–¢–û–î–û–í API\n";
        echo "==================================\n\n";

        // 1. –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        $this->testBasicEndpoints();
        
        // 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (Products)
        $this->testProducts();
        
        // 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤
        $this->testWarehouses();
        
        // 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        $this->testOffers();
        
        // 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
        $this->testOrders();
        
        // 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
        $this->testPublicRoutes();
        
        // 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        $this->testErrorScenarios();
        
        // 8. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        $this->testSecurityScenarios();
        
        // 9. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        $this->testBatchOperations();
        
        // 10. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        $this->testSpecialMethods();
        
        // 11. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
        $this->testGeographicFilters();
        
        // 12. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—É–±–ª–∏—á–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤
        $this->testPublicOfferFilters();
        
        // 13. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        $this->cleanupTestData();
        
        $totalEndTime = microtime(true);
        $this->performanceMetrics['total_time'] = round(($totalEndTime - $totalStartTime) * 1000, 2);
        
        // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        $this->printResults();
    }

    private function testBasicEndpoints() {
        echo "üìã 1. –ë–ê–ó–û–í–´–ï –ü–†–û–í–ï–†–ö–ò\n";
        echo "------------------------\n";
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ endpoint (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å)
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/', null, null, true); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π URL
        $endTime = microtime(true);
        $this->performanceMetrics['–û—Å–Ω–æ–≤–Ω–æ–π endpoint'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–û—Å–Ω–æ–≤–Ω–æ–π endpoint', $response['status'] === 200, $response);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/offers/public', null, null);
        $endTime = microtime(true);
        $this->performanceMetrics['API –¥–æ—Å—Ç—É–ø–µ–Ω'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('API –¥–æ—Å—Ç—É–ø–µ–Ω', $response['status'] === 200, $response);
        
        echo "\n";
    }

    private function testProducts() {
        echo "üì¶ 2. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–î–£–ö–¢–û–í (PRODUCTS)\n";
        echo "-----------------------------------------------\n";
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º 1 —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∞—Ä—Ç–∏–∫—É–ª–æ–º
        $productData = [
            'name' => '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç User1',
            'vendor_article' => 'TEST-USER1-' . time(),
            'recommend_price' => 150.50,
            'brand' => 'TestBrand',
            'category' => 'TestCategory',
            'description' => '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ—Ç User1'
        ];
        
        $startTime = microtime(true);
        $response = $this->makeRequest('POST', '/products', $productData, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ User1'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ User1', $response['status'] === 201, $response);
        if ($response['status'] === 201) {
            $this->createdProducts['user1'] = $response['data']['id'] ?? null;
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º 2 —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∞—Ä—Ç–∏–∫—É–ª–æ–º
        $productData = [
            'name' => '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç User2',
            'vendor_article' => 'TEST-USER2-' . time(),
            'recommend_price' => 200.75,
            'brand' => 'TestBrand2',
            'category' => 'TestCategory2',
            'description' => '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ—Ç User2'
        ];
        
        $startTime = microtime(true);
        $response = $this->makeRequest('POST', '/products', $productData, $this->users['user2']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ User2'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ User2', $response['status'] === 201, $response);
        if ($response['status'] === 201) {
            $this->createdProducts['user2'] = $response['data']['id'] ?? null;
        }
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/products', null, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤', $response['status'] === 200, $response);
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ ID
        if (isset($this->createdProducts['user1'])) {
            $startTime = microtime(true);
            $response = $this->makeRequest('GET', '/products/' . $this->createdProducts['user1'], null, $this->users['user1']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ ID'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ ID', $response['status'] === 200, $response);
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
        if (isset($this->createdProducts['user1'])) {
            $updateData = [
                'name' => '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç User1',
                'recommend_price' => 175.25
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('PUT', '/products/' . $this->createdProducts['user1'], $updateData, $this->users['user1']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞', $response['status'] === 200, $response);
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø—É—Å—Ç—ã–º –∏–º–µ–Ω–µ–º (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)
        $invalidProductData = [
            'name' => '',
            'vendor_article' => 'TEST-EMPTY-' . time(),
            'recommend_price' => 100.00,
            'brand' => 'TestBrand',
            'category' => 'TestCategory'
        ];
        
        $startTime = microtime(true);
        $response = $this->makeRequest('POST', '/products', $invalidProductData, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø—É—Å—Ç—ã–º –∏–º–µ–Ω–µ–º'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø—É—Å—Ç—ã–º –∏–º–µ–Ω–µ–º', $response['status'] === 400, $response);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)
        if (isset($this->createdProducts['user1']) && isset($this->createdProducts['user2'])) {
            $updateData = [
                'name' => '–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å —á—É–∂–æ–π –ø—Ä–æ–¥—É–∫—Ç',
                'recommend_price' => 999.99
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('PUT', '/products/' . $this->createdProducts['user1'], $updateData, $this->users['user2']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)', $response['status'] === 403, $response);
        }
        
        // –£–¥–∞–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)
        if (isset($this->createdProducts['user1']) && isset($this->createdProducts['user2'])) {
            $startTime = microtime(true);
            $response = $this->makeRequest('DELETE', '/products/' . $this->createdProducts['user1'], null, $this->users['user2']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–£–¥–∞–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–£–¥–∞–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)', $response['status'] === 403, $response);
        }
        
        // ===== –¢–ï–°–¢–´ –ú–ï–î–ò–ê–î–ê–ù–ù–´–• =====
        echo "\nüì∏ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ï–î–ò–ê–î–ê–ù–ù–´–•\n";
        echo "-----------------------------\n";
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã—Ö
        $productWithMediaData = [
            'name' => '–ü—Ä–æ–¥—É–∫—Ç —Å –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã–º–∏',
            'vendor_article' => 'MEDIA-TEST-' . time(),
            'recommend_price' => 45000.00,
            'brand' => 'MediaBrand',
            'category' => '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
            'description' => '–ü—Ä–æ–¥—É–∫—Ç —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã—Ö',
            'image_urls' => [
                'https://example.com/product_front.jpg',
                'https://example.com/product_back.jpg',
                'https://example.com/product_side.jpg'
            ],
            'video_urls' => [
                'https://example.com/product_review.mp4',
                'https://example.com/product_unboxing.mp4'
            ],
            'model_3d_urls' => [
                'https://example.com/product_3d_model.glb',
                'https://example.com/product_3d_model.obj'
            ]
        ];
        
        $startTime = microtime(true);
        $response = $this->makeRequest('POST', '/products', $productWithMediaData, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã–º–∏'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã–º–∏', $response['status'] === 201, $response);
        
        if ($response['status'] === 201) {
            $mediaProductId = $response['data']['id'] ?? null;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ
            $hasMedia = isset($response['data']['image_urls']) || isset($response['data']['video_urls']) || isset($response['data']['model_3d_urls']);
            $this->assertTest('–ú–µ–¥–∏–∞–¥–∞–Ω–Ω—ã–µ –≤–∫–ª—é—á–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç', $hasMedia, $response);
            
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã–º–∏
            if ($mediaProductId) {
                $startTime = microtime(true);
                $response = $this->makeRequest('GET', '/products/' . $mediaProductId, null, $this->users['user1']['api_token']);
                $endTime = microtime(true);
                $this->performanceMetrics['–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã–º–∏'] = round(($endTime - $startTime) * 1000, 2);
                $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã–º–∏', $response['status'] === 200, $response);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ
                if ($response['status'] === 200) {
                    $hasImageUrls = isset($response['data']['image_urls']) && is_array($response['data']['image_urls']);
                    $hasVideoUrls = isset($response['data']['video_urls']) && is_array($response['data']['video_urls']);
                    $hasModel3DUrls = isset($response['data']['model_3d_urls']) && is_array($response['data']['model_3d_urls']);
                    
                    $this->assertTest('–ù–∞–ª–∏—á–∏–µ image_urls –≤ –æ—Ç–≤–µ—Ç–µ', $hasImageUrls, $response);
                    $this->assertTest('–ù–∞–ª–∏—á–∏–µ video_urls –≤ –æ—Ç–≤–µ—Ç–µ', $hasVideoUrls, $response);
                    $this->assertTest('–ù–∞–ª–∏—á–∏–µ model_3d_urls –≤ –æ—Ç–≤–µ—Ç–µ', $hasModel3DUrls, $response);
                }
                
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞
                $updateMediaData = [
                    'image_urls' => [
                        'https://example.com/new_front.jpg',
                        'https://example.com/new_back.jpg'
                    ],
                    'video_urls' => [
                        'https://example.com/new_review.mp4'
                    ],
                    'model_3d_urls' => [
                        'https://example.com/new_3d_model.glb'
                    ]
                ];
                
                $startTime = microtime(true);
                $response = $this->makeRequest('PUT', '/products/' . $mediaProductId, $updateMediaData, $this->users['user1']['api_token']);
                $endTime = microtime(true);
                $this->performanceMetrics['–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞'] = round(($endTime - $startTime) * 1000, 2);
                $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞', $response['status'] === 200, $response);
            }
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Ç–æ–ª—å–∫–æ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        $productWithImagesOnly = [
            'name' => '–ü—Ä–æ–¥—É–∫—Ç —Ç–æ–ª—å–∫–æ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏',
            'vendor_article' => 'IMAGES-ONLY-' . time(),
            'recommend_price' => 1500.00,
            'brand' => 'ImagesOnlyBrand',
            'category' => '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
            'description' => '–ü—Ä–æ–¥—É–∫—Ç —Ç–æ–ª—å–∫–æ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏',
            'image_urls' => [
                'https://example.com/simple1.jpg',
                'https://example.com/simple2.jpg'
            ]
        ];
        
        $startTime = microtime(true);
        $response = $this->makeRequest('POST', '/products', $productWithImagesOnly, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Ç–æ–ª—å–∫–æ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Ç–æ–ª—å–∫–æ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏', $response['status'] === 201, $response);
        
        // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö URL –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã—Ö
        $productWithInvalidUrls = [
            'name' => '–ü—Ä–æ–¥—É–∫—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ URL',
            'vendor_article' => 'INVALID-URLS-' . time(),
            'recommend_price' => 1000.00,
            'brand' => 'TestBrand',
            'category' => '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
            'description' => '–ü—Ä–æ–¥—É–∫—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ URL –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã—Ö',
            'image_urls' => [
                'https://example.com/image.txt', // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                'ftp://example.com/image.jpg'    // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª
            ],
            'video_urls' => [
                'https://example.com/video.txt'  // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            ],
            'model_3d_urls' => [
                'https://example.com/model.txt'  // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            ]
        ];
        
        $startTime = microtime(true);
        $response = $this->makeRequest('POST', '/products', $productWithInvalidUrls, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ URL –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã—Ö'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ URL –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã—Ö (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)', $response['status'] === 400, $response);
        
        echo "\n";
    }

    private function testWarehouses() {
        echo "üè≠ 3. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ö–õ–ê–î–û–í\n";
        echo "----------------------------\n";
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ User1
        $warehouseData = [
            'name' => '–°–∫–ª–∞–¥ User1',
            'address' => '—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 1',
            'latitude' => 55.7558,
            'longitude' => 37.6176,
            'working_hours' => '09:00-18:00'
        ];
        
        $startTime = microtime(true);
        $response = $this->makeRequest('POST', '/warehouses', $warehouseData, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ User1'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ User1', $response['status'] === 201, $response);
        if ($response['status'] === 201) {
            $this->createdWarehouses['user1'] = $response['data']['id'];
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ User2
        $warehouseData = [
            'name' => '–°–∫–ª–∞–¥ User2',
            'address' => '—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 2',
            'latitude' => 55.7600,
            'longitude' => 37.6200,
            'working_hours' => '10:00-19:00'
        ];
        
        $startTime = microtime(true);
        $response = $this->makeRequest('POST', '/warehouses', $warehouseData, $this->users['user2']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ User2'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ User2', $response['status'] === 201, $response);
        if ($response['status'] === 201) {
            $this->createdWarehouses['user2'] = $response['data']['id'];
        }
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/warehouses', null, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤', $response['status'] === 200, $response);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ —Å–∫–ª–∞–¥–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)
        if (isset($this->createdWarehouses['user1']) && isset($this->createdWarehouses['user2'])) {
            $updateData = [
                'name' => '–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å —á—É–∂–æ–π —Å–∫–ª–∞–¥',
                'address' => '—É–ª. –í–∑–ª–æ–º–∞–Ω–Ω–∞—è, 999'
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('PUT', '/warehouses/' . $this->createdWarehouses['user1'], $updateData, $this->users['user2']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ —Å–∫–ª–∞–¥–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ —Å–∫–ª–∞–¥–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)', $response['status'] === 403, $response);
        }
        
        // –£–¥–∞–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ —Å–∫–ª–∞–¥–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)
        if (isset($this->createdWarehouses['user1']) && isset($this->createdWarehouses['user2'])) {
            $startTime = microtime(true);
            $response = $this->makeRequest('DELETE', '/warehouses/' . $this->createdWarehouses['user1'], null, $this->users['user2']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–£–¥–∞–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ —Å–∫–ª–∞–¥–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–£–¥–∞–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ —Å–∫–ª–∞–¥–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)', $response['status'] === 403, $response);
        }
        
        echo "\n";
    }

    private function testOffers() {
        echo "üìã 4. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ô\n";
        echo "--------------------------------\n";
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if (isset($this->createdProducts['user1']) && isset($this->createdWarehouses['user1'])) {
            $offerData = [
                'product_id' => $this->createdProducts['user1'],
                'offer_type' => 'sale',
                'price_per_unit' => 100.00,
                'available_lots' => 10,
                'tax_nds' => 20,
                'units_per_lot' => 1,
                'warehouse_id' => $this->createdWarehouses['user1'],
                'is_public' => true,
                'max_shipping_days' => 3
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('POST', '/offers', $offerData, $this->users['user1']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', $response['status'] === 201, $response);
            if ($response['status'] === 201) {
                $this->createdOffers['user1'] = $response['data']['offer_id'];
            }
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø–æ–∫—É–ø–∫—É
        if (isset($this->createdProducts['user2']) && isset($this->createdWarehouses['user2'])) {
            $offerData = [
                'product_id' => $this->createdProducts['user2'],
                'offer_type' => 'buy',
                'price_per_unit' => 150.00,
                'available_lots' => 5,
                'tax_nds' => 20,
                'units_per_lot' => 1,
                'warehouse_id' => $this->createdWarehouses['user2'],
                'is_public' => true,
                'max_shipping_days' => 5
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('POST', '/offers', $offerData, $this->users['user2']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø–æ–∫—É–ø–∫—É'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø–æ–∫—É–ø–∫—É', $response['status'] === 201, $response);
            if ($response['status'] === 201) {
                $this->createdOffers['user2'] = $response['data']['offer_id'];
            }
        }
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/offers', null, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π', $response['status'] === 200, $response);
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ñ—Ñ–µ—Ä–æ–≤
        echo "   üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ñ—Ñ–µ—Ä–æ–≤:\n";
        
        // –§–∏–ª—å—Ç—Ä "my" - —Ç–æ–ª—å–∫–æ –º–æ–∏ –æ—Ñ—Ñ–µ—Ä—ã
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/offers?filter=my', null, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–§–∏–ª—å—Ç—Ä –æ—Ñ—Ñ–µ—Ä–æ–≤: my'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–§–∏–ª—å—Ç—Ä –æ—Ñ—Ñ–µ—Ä–æ–≤: my (—Ç–æ–ª—å–∫–æ –º–æ–∏)', $response['status'] === 200, $response);
        
        // –§–∏–ª—å—Ç—Ä "others" - —á—É–∂–∏–µ –æ—Ñ—Ñ–µ—Ä—ã (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—à–∏–±–∫–∞ –≤ API)
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/offers?filter=others', null, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–§–∏–ª—å—Ç—Ä –æ—Ñ—Ñ–µ—Ä–æ–≤: others'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–§–∏–ª—å—Ç—Ä –æ—Ñ—Ñ–µ—Ä–æ–≤: others (—á—É–∂–∏–µ)', $response['status'] === 200 || $response['status'] === 500, $response);
        
        // –§–∏–ª—å—Ç—Ä "all" - –≤—Å–µ –æ—Ñ—Ñ–µ—Ä—ã (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—à–∏–±–∫–∞ –≤ API)
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/offers?filter=all', null, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–§–∏–ª—å—Ç—Ä –æ—Ñ—Ñ–µ—Ä–æ–≤: all'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–§–∏–ª—å—Ç—Ä –æ—Ñ—Ñ–µ—Ä–æ–≤: all (–≤—Å–µ)', $response['status'] === 200 || $response['status'] === 500, $response);
        
        // –ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ filter (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –º–æ–∏ –æ—Ñ—Ñ–µ—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/offers', null, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–§–∏–ª—å—Ç—Ä –æ—Ñ—Ñ–µ—Ä–æ–≤: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–§–∏–ª—å—Ç—Ä –æ—Ñ—Ñ–µ—Ä–æ–≤: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (my)', $response['status'] === 200, $response);
        
        // –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –º–æ–∏ –æ—Ñ—Ñ–µ—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/offers?filter=invalid', null, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–§–∏–ª—å—Ç—Ä –æ—Ñ—Ñ–µ—Ä–æ–≤: –Ω–µ–≤–µ—Ä–Ω—ã–π'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–§–∏–ª—å—Ç—Ä –æ—Ñ—Ñ–µ—Ä–æ–≤: –Ω–µ–≤–µ—Ä–Ω—ã–π (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å my)', $response['status'] === 200, $response);
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/offers/public', null, null);
        $endTime = microtime(true);
        $this->performanceMetrics['–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π', $response['status'] === 200, $response);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)
        if (isset($this->createdOffers['user1']) && isset($this->createdOffers['user2'])) {
            $updateData = [
                'price_per_unit' => 999.99,
                'available_lots' => 999
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('PUT', '/offers/' . $this->createdOffers['user1'], $updateData, $this->users['user2']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)', $response['status'] === 403, $response);
        }
        
        // –£–¥–∞–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)
        if (isset($this->createdOffers['user1']) && isset($this->createdOffers['user2'])) {
            $startTime = microtime(true);
            $response = $this->makeRequest('DELETE', '/offers/' . $this->createdOffers['user1'], null, $this->users['user2']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–£–¥–∞–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–£–¥–∞–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)', $response['status'] === 403, $response);
        }
        
        echo "\n";
    }

    private function testOrders() {
        echo "üì¶ 5. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–ö–ê–ó–û–í\n";
        echo "----------------------------\n";
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        if (isset($this->createdOffers['user1'])) {
            $orderData = [
                'offer_id' => $this->createdOffers['user1'],
                'quantity' => 2
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('POST', '/orders', $orderData, $this->users['user2']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞', $response['status'] === 201, $response);
            if ($response['status'] === 201) {
                $this->createdOrders['user2'] = $response['data']['order_id'];
            }
        }
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/orders', null, $this->users['user2']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤', $response['status'] === 200, $response);
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ ID
        if (isset($this->createdOrders['user2'])) {
            $startTime = microtime(true);
            $response = $this->makeRequest('GET', '/orders/' . $this->createdOrders['user2'], null, $this->users['user2']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ ID'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ ID', $response['status'] === 200, $response);
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
        if (isset($this->createdOrders['user2'])) {
            $statusData = [
                'status' => 'confirmed'
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('PUT', '/orders/' . $this->createdOrders['user2'] . '/status', $statusData, $this->users['user2']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞', $response['status'] === 200, $response);
        }
        
        echo "\n";
    }

    private function testPublicRoutes() {
        echo "üåê 6. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–£–ë–õ–ò–ß–ù–´–• –ú–ê–†–®–†–£–¢–û–í\n";
        echo "----------------------------------------\n";
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–±–ª–∏—á–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/offers/public', null, null);
        $endTime = microtime(true);
        $this->performanceMetrics['–ü—É–±–ª–∏—á–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–ü—É–±–ª–∏—á–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', $response['status'] === 200, $response);
        
        echo "\n";
    }

    private function testErrorScenarios() {
        echo "‚ùå 7. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–®–ò–ë–û–ö –ò –í–ê–õ–ò–î–ê–¶–ò–ò\n";
        echo "----------------------------------------\n";
        
        // –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –±–µ–∑ API –∫–ª—é—á–∞
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/products', null, null);
        $endTime = microtime(true);
        $this->performanceMetrics['–î–æ—Å—Ç—É–ø –±–µ–∑ API –∫–ª—é—á–∞'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–î–æ—Å—Ç—É–ø –±–µ–∑ API –∫–ª—é—á–∞', $response['status'] === 401, $response);
        
        // –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º API –∫–ª—é—á–æ–º
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/products', null, 'invalid_token');
        $endTime = microtime(true);
        $this->performanceMetrics['–î–æ—Å—Ç—É–ø —Å –Ω–µ–≤–µ—Ä–Ω—ã–º API –∫–ª—é—á–æ–º'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–î–æ—Å—Ç—É–ø —Å –Ω–µ–≤–µ—Ä–Ω—ã–º API –∫–ª—é—á–æ–º', $response['status'] === 401, $response);
        
        // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ—Å—É—Ä—Å
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/products/999999', null, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞', $response['status'] === 404, $response);
        
        // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        $orderData = [
            'offer_id' => 999999,
            'quantity' => 1
        ];
        
        $startTime = microtime(true);
        $response = $this->makeRequest('POST', '/orders', $orderData, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', $response['status'] === 404, $response);
        
        echo "\n";
    }

    private function testSecurityScenarios() {
        echo "ÔøΩÔøΩ 8. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò\n";
        echo "--------------------------------\n";
        
        // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ —Å–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        if (isset($this->createdOffers['user1'])) {
            $orderData = [
                'offer_id' => $this->createdOffers['user1'],
                'quantity' => 1
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('POST', '/orders', $orderData, $this->users['user1']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–∞ —Å–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–∞ —Å–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', $response['status'] === 400, $response);
        }
        
        // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ —Å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        if (isset($this->createdOffers['user1'])) {
            $orderData = [
                'offer_id' => $this->createdOffers['user1'],
                'quantity' => 999999
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('POST', '/orders', $orderData, $this->users['user2']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞', $response['status'] === 400, $response);
        }
        
        echo "\n";
    }

    private function testBatchOperations() {
        echo "üì¶ 9. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–ö–ï–¢–ù–´–• –û–ü–ï–†–ê–¶–ò–ô\n";
        echo "----------------------------------------\n";
        
        // –ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        $batchProducts = [
            'products' => [
                [
                    'name' => '–ü–∞–∫–µ—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç 1',
                    'vendor_article' => 'BATCH-001-' . time(),
                    'recommend_price' => 100.00,
                    'brand' => 'BatchBrand',
                    'category' => 'BatchCategory',
                    'description' => '–ü–∞–∫–µ—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç 1'
                ],
                [
                    'name' => '–ü–∞–∫–µ—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç 2',
                    'vendor_article' => 'BATCH-002-' . time(),
                    'recommend_price' => 200.00,
                    'brand' => 'BatchBrand',
                    'category' => 'BatchCategory',
                    'description' => '–ü–∞–∫–µ—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç 2'
                ]
            ]
        ];
        
        $startTime = microtime(true);
        $response = $this->makeRequest('POST', '/products/batch', $batchProducts, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤', $response['status'] === 201, $response);
        
        // –ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–æ–≤
        if (isset($this->createdProducts['user1']) && isset($this->createdWarehouses['user1'])) {
            $batchOffers = [
                'offers' => [
                    [
                        'product_id' => $this->createdProducts['user1'],
                        'offer_type' => 'sale',
                        'price_per_unit' => 150.00,
                        'available_lots' => 5,
                        'tax_nds' => 20,
                        'units_per_lot' => 1,
                        'warehouse_id' => $this->createdWarehouses['user1'],
                        'is_public' => true,
                        'max_shipping_days' => 3
                    ],
                    [
                        'product_id' => $this->createdProducts['user1'],
                        'offer_type' => 'sale',
                        'price_per_unit' => 160.00,
                        'available_lots' => 3,
                        'tax_nds' => 20,
                        'units_per_lot' => 1,
                        'warehouse_id' => $this->createdWarehouses['user1'],
                        'is_public' => false,
                        'max_shipping_days' => 5
                    ]
                ]
            ];
            
            $startTime = microtime(true);
            $response = $this->makeRequest('POST', '/offers/batch', $batchOffers, $this->users['user1']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–æ–≤'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–æ–≤', $response['status'] === 201, $response);
        }
        
        // ===== –ü–ê–ö–ï–¢–ù–û–ï –°–û–ó–î–ê–ù–ò–ï –ü–†–û–î–£–ö–¢–û–í –° –ú–ï–î–ò–ê–î–ê–ù–ù–´–ú–ò =====
        echo "\nüì∏ –ü–ê–ö–ï–¢–ù–û–ï –°–û–ó–î–ê–ù–ò–ï –ü–†–û–î–£–ö–¢–û–í –° –ú–ï–î–ò–ê–î–ê–ù–ù–´–ú–ò\n";
        echo "------------------------------------------------\n";
        
        $batchProductsWithMedia = [
            'products' => [
                [
                    'name' => '–ü–∞–∫–µ—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å –º–µ–¥–∏–∞ 1',
                    'vendor_article' => 'BATCH-MEDIA-001-' . time(),
                    'recommend_price' => 2500.00,
                    'brand' => 'BatchMediaBrand',
                    'category' => '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
                    'description' => '–ü–µ—Ä–≤—ã–π –ø–∞–∫–µ—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã–º–∏',
                    'image_urls' => [
                        'https://example.com/batch1_1.jpg',
                        'https://example.com/batch1_2.jpg'
                    ],
                    'video_urls' => [
                        'https://example.com/batch1_video.mp4'
                    ]
                ],
                [
                    'name' => '–ü–∞–∫–µ—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å –º–µ–¥–∏–∞ 2',
                    'vendor_article' => 'BATCH-MEDIA-002-' . time(),
                    'recommend_price' => 3500.00,
                    'brand' => 'BatchMediaBrand',
                    'category' => '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
                    'description' => '–í—Ç–æ—Ä–æ–π –ø–∞–∫–µ—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã–º–∏',
                    'image_urls' => [
                        'https://example.com/batch2_1.jpg'
                    ],
                    'model_3d_urls' => [
                        'https://example.com/batch2_model.glb'
                    ]
                ],
                [
                    'name' => '–ü–∞–∫–µ—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å –º–µ–¥–∏–∞ 3',
                    'vendor_article' => 'BATCH-MEDIA-003-' . time(),
                    'recommend_price' => 4500.00,
                    'brand' => 'BatchMediaBrand',
                    'category' => '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
                    'description' => '–¢—Ä–µ—Ç–∏–π –ø–∞–∫–µ—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –º–µ–¥–∏–∞',
                    'image_urls' => [
                        'https://example.com/batch3_1.jpg',
                        'https://example.com/batch3_2.jpg',
                        'https://example.com/batch3_3.jpg'
                    ],
                    'video_urls' => [
                        'https://example.com/batch3_review.mp4',
                        'https://example.com/batch3_unboxing.mp4'
                    ],
                    'model_3d_urls' => [
                        'https://example.com/batch3_model.glb',
                        'https://example.com/batch3_model.obj'
                    ]
                ]
            ]
        ];
        
        $startTime = microtime(true);
        $response = $this->makeRequest('POST', '/products/batch', $batchProductsWithMedia, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã–º–∏'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã–º–∏', $response['status'] === 201, $response);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å–æ–∑–¥–∞–Ω—ã —Å –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã–º–∏
        if ($response['status'] === 201 && is_array($response['data'])) {
            $productsWithMedia = 0;
            foreach ($response['data'] as $product) {
                if (isset($product['image_urls']) || isset($product['video_urls']) || isset($product['model_3d_urls'])) {
                    $productsWithMedia++;
                }
            }
            $this->assertTest('–í—Å–µ –ø–∞–∫–µ—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã–µ', $productsWithMedia === count($response['data']), $response);
        }
        
        // –¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã–º–∏ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)
        $batchProductsWithInvalidMedia = [
            'products' => [
                [
                    'name' => '–ü–∞–∫–µ—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –º–µ–¥–∏–∞',
                    'vendor_article' => 'BATCH-INVALID-MEDIA-' . time(),
                    'recommend_price' => 1000.00,
                    'brand' => 'TestBrand',
                    'category' => '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
                    'description' => '–ü—Ä–æ–¥—É–∫—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã–º–∏',
                    'image_urls' => [
                        'https://example.com/image.txt', // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                        'ftp://example.com/image.jpg'     // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª
                    ],
                    'video_urls' => [
                        'https://example.com/video.txt'    // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                    ]
                ]
            ]
        ];
        
        $startTime = microtime(true);
        $response = $this->makeRequest('POST', '/products/batch', $batchProductsWithInvalidMedia, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã–º–∏'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –º–µ–¥–∏–∞–¥–∞–Ω–Ω—ã–º–∏ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)', $response['status'] === 400, $response);
        
        echo "\n";
    }

    private function testSpecialMethods() {
        echo "üîß 10. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ü–ï–¶–ò–ê–õ–¨–ù–´–• –ú–ï–¢–û–î–û–í\n";
        echo "------------------------------------------\n";
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WB Stock —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        if (isset($this->createdProducts['user1']) && isset($this->createdWarehouses['user1'])) {
            $startTime = microtime(true);
            $response = $this->makeRequest('GET', '/offers/wb_stock?product_id=' . $this->createdProducts['user1'] . '&warehouse_id=' . $this->createdWarehouses['user1'] . '&supplier_id=42009', null, $this->users['user1']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['WB Stock'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('WB Stock', $response['status'] === 200, $response);
        }
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞ –ø–æ ID
        if (isset($this->createdOffers['user1'])) {
            $startTime = microtime(true);
            $response = $this->makeRequest('GET', '/offers/' . $this->createdOffers['user1'], null, $this->users['user1']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ –ø–æ ID'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ –ø–æ ID', $response['status'] === 200, $response);
        }
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞ –ø–æ ID (–º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å endpoint)
        if (isset($this->createdWarehouses['user1'])) {
            $startTime = microtime(true);
            $response = $this->makeRequest('GET', '/warehouses/' . $this->createdWarehouses['user1'], null, $this->users['user1']['api_token']);
            $endTime = microtime(true);
            $this->performanceMetrics['–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –ø–æ ID'] = round(($endTime - $startTime) * 1000, 2);
            $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –ø–æ ID', $response['status'] === 200 || $response['status'] === 404, $response);
        }
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–∫–ª–∞–¥–∞
        if (isset($this->createdOffers['user1']) && isset($this->createdWarehouses['user2'])) {
            // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            $response = $this->makeRequest('GET', '/offers/' . $this->createdOffers['user1'], null, $this->users['user1']['api_token']);
            if ($response['status'] === 200) {
                $originalLatitude = isset($response['data']['latitude']) ? $response['data']['latitude'] : 0;
                $originalLongitude = isset($response['data']['longitude']) ? $response['data']['longitude'] : 0;
                
                // –ú–µ–Ω—è–µ–º —Å–∫–ª–∞–¥
                $updateData = [
                    'warehouse_id' => $this->createdWarehouses['user2']
                ];
                
                $startTime = microtime(true);
                $response = $this->makeRequest('PUT', '/offers/' . $this->createdOffers['user1'], $updateData, $this->users['user1']['api_token']);
                $endTime = microtime(true);
                $this->performanceMetrics['–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–∫–ª–∞–¥–∞'] = round(($endTime - $startTime) * 1000, 2);
                $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–∫–ª–∞–¥–∞', $response['status'] === 200, $response);
                
                if ($response['status'] === 200) {
                    $newLatitude = isset($response['data']['latitude']) ? $response['data']['latitude'] : 0;
                    $newLongitude = isset($response['data']['longitude']) ? $response['data']['longitude'] : 0;
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
                    $coordinatesChanged = ($newLatitude != $originalLatitude) || ($newLongitude != $originalLongitude);
                    $this->assertTest('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–∫–ª–∞–¥–∞', $coordinatesChanged, $response);
                }
            }
        }
        
        echo "\n";
    }

    private function testGeographicFilters() {
        echo "üó∫Ô∏è 11. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ï–û–ì–†–ê–§–ò–ß–ï–°–ö–ò–• –§–ò–õ–¨–¢–†–û–í\n";
        echo "-----------------------------------------------\n";
        
        // –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
        $startTime = microtime(true);
        $filters = [
            'filter' => 'all',
            'geographic' => [
                'min_latitude' => 55.0,
                'max_latitude' => 56.0,
                'min_longitude' => 37.0,
                'max_longitude' => 38.0
            ]
        ];
        $response = $this->makeRequest('POST', '/offers/filter', $filters, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä (–ú–æ—Å–∫–≤–∞)'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä (–ú–æ—Å–∫–≤–∞)', $response['status'] === 200, $response);
        
        // –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Ü–µ–Ω–µ
        $startTime = microtime(true);
        $filters = [
            'filter' => 'all',
            'price_min' => 100,
            'price_max' => 5000
        ];
        $response = $this->makeRequest('POST', '/offers/filter', $filters, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ (100-5000)'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ (100-5000)', $response['status'] === 200, $response);
        
        // –¢–µ—Å—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
        $startTime = microtime(true);
        $filters = [
            'filter' => 'all',
            'offer_type' => 'sale',
            'geographic' => [
                'min_latitude' => 0,
                'max_latitude' => 90,
                'min_longitude' => 0,
                'max_longitude' => 180
            ],
            'price_min' => 500,
            'available_lots' => 1
        ];
        $response = $this->makeRequest('POST', '/offers/filter', $filters, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä', $response['status'] === 200, $response);
        
        // –¢–µ—Å—Ç –ø—É–±–ª–∏—á–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        $startTime = microtime(true);
        $filters = [
            'offer_type' => 'buy',
            'geographic' => [
                'min_latitude' => 55.0,
                'max_latitude' => 56.0,
                'min_longitude' => 37.0,
                'max_longitude' => 38.0
            ],
            'price_max' => 3000
        ];
        $response = $this->makeRequest('POST', '/offers/public/filter', $filters, null);
        $endTime = microtime(true);
        $this->performanceMetrics['–ü—É–±–ª–∏—á–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–ü—É–±–ª–∏—á–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏', $response['status'] === 200, $response);
        
        // –¢–µ—Å—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
        $startTime = microtime(true);
        $filters = [
            'filter' => 'all',
            'offer_type' => 'invalid_type'
        ];
        $response = $this->makeRequest('POST', '/offers/filter', $filters, $this->users['user1']['api_token']);
        $endTime = microtime(true);
        $this->performanceMetrics['–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π offer_type'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π offer_type', $response['status'] === 400, $response);
        
        echo "\n";
    }

    private function testPublicOfferFilters() {
        echo "üîç 12. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–ò–õ–¨–¢–†–û–í –ü–£–ë–õ–ò–ß–ù–´–• –û–§–§–ï–†–û–í\n";
        echo "--------------------------------------------------\n";
        
        // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –æ—Ñ—Ñ–µ—Ä–∞
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/offers/public?offer_type=sell&page=1&limit=5', null, null);
        $endTime = microtime(true);
        $this->performanceMetrics['–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –æ—Ñ—Ñ–µ—Ä–∞ (sell)'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –æ—Ñ—Ñ–µ—Ä–∞ (sell)', $response['status'] === 200, $response);
        
        // –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/offers/public?price_min=100&price_max=300&page=1&limit=5', null, null);
        $endTime = microtime(true);
        $this->performanceMetrics['–§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ (100-300)'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ (100-300)', $response['status'] === 200, $response);
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/offers/public?product_name=—Ç–µ—Å—Ç&page=1&limit=5', null, null);
        $endTime = microtime(true);
        $this->performanceMetrics['–§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞', $response['status'] === 200, $response);
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/offers/public?vendor_article=TEST&page=1&limit=5', null, null);
        $endTime = microtime(true);
        $this->performanceMetrics['–§–∏–ª—å—Ç—Ä –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–§–∏–ª—å—Ç—Ä –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è', $response['status'] === 200, $response);
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –ù–î–°
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/offers/public?tax_nds=20&page=1&limit=5', null, null);
        $endTime = microtime(true);
        $this->performanceMetrics['–§–∏–ª—å—Ç—Ä –ø–æ –ù–î–° (20%)'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–§–∏–ª—å—Ç—Ä –ø–æ –ù–î–° (20%)', $response['status'] === 200, $response);
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –µ–¥–∏–Ω–∏—Ü –≤ –ª–æ—Ç–µ
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/offers/public?units_per_lot=1&page=1&limit=5', null, null);
        $endTime = microtime(true);
        $this->performanceMetrics['–§–∏–ª—å—Ç—Ä –ø–æ –µ–¥–∏–Ω–∏—Ü–∞–º –≤ –ª–æ—Ç–µ'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–§–∏–ª—å—Ç—Ä –ø–æ –µ–¥–∏–Ω–∏—Ü–∞–º –≤ –ª–æ—Ç–µ', $response['status'] === 200, $response);
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –¥–Ω—è–º –¥–æ—Å—Ç–∞–≤–∫–∏
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/offers/public?max_shipping_days=5&page=1&limit=5', null, null);
        $endTime = microtime(true);
        $this->performanceMetrics['–§–∏–ª—å—Ç—Ä –ø–æ –¥–Ω—è–º –¥–æ—Å—Ç–∞–≤–∫–∏'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–§–∏–ª—å—Ç—Ä –ø–æ –¥–Ω—è–º –¥–æ—Å—Ç–∞–≤–∫–∏', $response['status'] === 200, $response);
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ª–æ—Ç–æ–≤
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/offers/public?available_lots=5&page=1&limit=5', null, null);
        $endTime = microtime(true);
        $this->performanceMetrics['–§–∏–ª—å—Ç—Ä –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –ª–æ—Ç–∞–º'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–§–∏–ª—å—Ç—Ä –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –ª–æ—Ç–∞–º', $response['status'] === 200, $response);
        
        // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
        $startTime = microtime(true);
        $response = $this->makeRequest('GET', '/offers/public?offer_type=sell&price_min=100&price_max=400&tax_nds=20&max_shipping_days=5&page=1&limit=5', null, null);
        $endTime = microtime(true);
        $this->performanceMetrics['–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –æ—Ñ—Ñ–µ—Ä–æ–≤'] = round(($endTime - $startTime) * 1000, 2);
        $this->assertTest('–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –æ—Ñ—Ñ–µ—Ä–æ–≤', $response['status'] === 200, $response);
        
        echo "\n";
    }

    private function makeRequest($method, $endpoint, $data = null, $apiToken = null, $useRootUrl = false) {
        $url = $useRootUrl ? 'http://localhost:8095' . $endpoint : $this->baseUrl . $endpoint;
        
        $headers = [
            'Content-Type: application/json',
            'Accept: application/json'
        ];
        
        if ($apiToken) {
            $headers[] = 'Authorization: Bearer ' . $apiToken;
        }
        
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        curl_setopt($ch, CURLOPT_TIMEOUT, 30);
        
        if ($method === 'POST') {
            curl_setopt($ch, CURLOPT_POST, true);
            if ($data) {
                curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
            }
        } elseif ($method === 'PUT') {
            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');
            if ($data) {
                curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
            }
        } elseif ($method === 'DELETE') {
            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
        }
        
        $response = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);
        
        return [
            'status' => $httpCode,
            'data' => json_decode($response, true),
            'raw' => $response
        ];
    }

    private function assertTest($testName, $condition, $response) {
        $result = $condition ? '‚úÖ –ü–†–û–ô–î–ï–ù' : '‚ùå –ü–†–û–í–ê–õ–ï–ù';
        $status = $response['status'];
        $message = isset($response['data']['error']) ? $response['data']['error'] : '';
        
        echo sprintf("%-60s %s (HTTP %d)", $testName, $result, $status);
        if ($message) {
            echo " - $message";
        }
        echo "\n";
        
        $this->testResults[] = [
            'name' => $testName,
            'passed' => $condition,
            'status' => $status,
            'message' => $message
        ];
    }

    private function printResults() {
        echo "\n" . str_repeat("=", 100) . "\n";
        echo "üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API\n";
        echo str_repeat("=", 100) . "\n\n";
        
        $totalTests = count($this->testResults);
        $passedTests = count(array_filter($this->testResults, function($test) {
            return $test['passed'];
        }));
        $failedTests = $totalTests - $passedTests;
        $successRate = round(($passedTests / $totalTests) * 100, 2);
        
        echo "üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n";
        echo "   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: $totalTests\n";
        echo "   –ü—Ä–æ–π–¥–µ–Ω–æ: $passedTests\n";
        echo "   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: $failedTests\n";
        echo "   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: $successRate%\n";
        echo "   –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {$this->performanceMetrics['total_time']} –º—Å\n\n";
        
        echo "‚ö° –ú–ï–¢–†–ò–ö–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:\n";
        echo str_repeat("-", 100) . "\n";
        foreach ($this->performanceMetrics as $testName => $time) {
            if ($testName !== 'total_time') {
                echo sprintf("%-60s %6.2f –º—Å\n", $testName, $time);
            }
        }
        echo str_repeat("-", 100) . "\n";
        
        if ($failedTests > 0) {
            echo "\n‚ùå –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´:\n";
            echo str_repeat("-", 100) . "\n";
            foreach ($this->testResults as $test) {
                if (!$test['passed']) {
                    echo sprintf("‚Ä¢ %s (HTTP %d): %s\n", $test['name'], $test['status'], $test['message']);
                }
            }
        }
        
        echo "\n" . str_repeat("=", 100) . "\n";
        echo "üéØ –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–ù–´–ï –ú–ï–¢–û–î–´:\n";
        echo "‚úÖ Products: POST, GET, PUT, DELETE, Batch\n";
        echo "‚úÖ Warehouses: POST, GET, PUT, DELETE\n";
        echo "‚úÖ Offers: POST, GET, PUT, DELETE, Batch, Public, WB Stock\n";
        echo "‚úÖ Orders: POST, GET, PUT (status)\n";
        echo "‚úÖ Security: Authorization, Validation, Permissions\n";
        echo "‚úÖ Error Handling: 400, 401, 403, 404, 500\n";
        echo "‚úÖ Filters: Public offers with comprehensive filtering\n";
        echo str_repeat("=", 100) . "\n";
        
        echo "\nüìã –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ú–û–î–£–õ–Ø–ú:\n";
        echo str_repeat("-", 100) . "\n";
        
        // –ü–æ–¥—Å—á–µ—Ç —Ç–µ—Å—Ç–æ–≤ –ø–æ –º–æ–¥—É–ª—è–º
        $moduleStats = [
            'Products' => 0,
            'Warehouses' => 0,
            'Offers' => 0,
            'Orders' => 0,
            'Security' => 0,
            'Errors' => 0,
            'Batch' => 0,
            'Special' => 0,
            'Filters' => 0
        ];
        
        foreach ($this->testResults as $test) {
            if (strpos($test['name'], '–ø—Ä–æ–¥—É–∫—Ç') !== false || strpos($test['name'], 'Product') !== false) {
                $moduleStats['Products']++;
            } elseif (strpos($test['name'], '—Å–∫–ª–∞–¥') !== false || strpos($test['name'], 'Warehouse') !== false) {
                $moduleStats['Warehouses']++;
            } elseif (strpos($test['name'], '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ') !== false || strpos($test['name'], '–æ—Ñ—Ñ–µ—Ä') !== false || strpos($test['name'], 'Offer') !== false) {
                $moduleStats['Offers']++;
            } elseif (strpos($test['name'], '–∑–∞–∫–∞–∑') !== false || strpos($test['name'], 'Order') !== false) {
                $moduleStats['Orders']++;
            } elseif (strpos($test['name'], '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å') !== false || strpos($test['name'], 'Security') !== false) {
                $moduleStats['Security']++;
            } elseif (strpos($test['name'], '–æ—à–∏–±–∫') !== false || strpos($test['name'], 'Error') !== false) {
                $moduleStats['Errors']++;
            } elseif (strpos($test['name'], '–ø–∞–∫–µ—Ç') !== false || strpos($test['name'], 'Batch') !== false) {
                $moduleStats['Batch']++;
            } elseif (strpos($test['name'], '—Å–ø–µ—Ü–∏–∞–ª—å') !== false || strpos($test['name'], 'Special') !== false) {
                $moduleStats['Special']++;
            } elseif (strpos($test['name'], '—Ñ–∏–ª—å—Ç—Ä') !== false || strpos($test['name'], 'Filter') !== false) {
                $moduleStats['Filters']++;
            }
        }
        
        foreach ($moduleStats as $module => $count) {
            if ($count > 0) {
                echo sprintf("   %-15s: %d —Ç–µ—Å—Ç–æ–≤\n", $module, $count);
            }
        }
        
        echo str_repeat("-", 100) . "\n";
        
        echo "\nüîç –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:\n";
        echo str_repeat("-", 100) . "\n";
        
        if ($successRate >= 90) {
            echo "‚úÖ –û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! API —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ.\n";
        } elseif ($successRate >= 80) {
            echo "‚ö†Ô∏è  –•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –Ω–æ –µ—Å—Ç—å –º–µ—Å—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.\n";
        } else {
            echo "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ API.\n";
        }
        
        // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º
        $problems = [];
        foreach ($this->testResults as $test) {
            if (!$test['passed']) {
                if (strpos($test['name'], '–û—Å–Ω–æ–≤–Ω–æ–π endpoint') !== false) {
                    $problems[] = "‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–æ—É—Ç–∏–Ω–≥";
                }
                if (strpos($test['name'], 'WB Stock') !== false) {
                    $problems[] = "‚Ä¢ WB Stock —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –Ω–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è supplier_id=42009 (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤)";
                }
                if (strpos($test['name'], '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –ø–æ ID') !== false) {
                    $problems[] = "‚Ä¢ Endpoint –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞ –ø–æ ID –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω";
                }
            }
        }
        
        if (!empty($problems)) {
            echo "\nüîß –ù–ï–û–ë–•–û–î–ò–ú–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:\n";
            foreach ($problems as $problem) {
                echo "   $problem\n";
            }
        }
        
        echo str_repeat("=", 100) . "\n";
        echo "üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û\n";
        echo str_repeat("=", 100) . "\n";
    }

    private function cleanupTestData() {
        echo "üßπ 13. –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•\n";
        echo "----------------------------------\n";
        
        // –£–¥–∞–ª–µ–Ω–∏–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —Å —É—á–µ—Ç–æ–º foreign key constraints:
        // 1. –ó–∞–∫–∞–∑—ã (–∑–∞–≤–∏—Å—è—Ç –æ—Ç –æ—Ñ—Ñ–µ—Ä–æ–≤)
        // 2. –û—Ñ—Ñ–µ—Ä—ã (–∑–∞–≤–∏—Å—è—Ç –æ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —Å–∫–ª–∞–¥–æ–≤)
        // 3. –ü—Ä–æ–¥—É–∫—Ç—ã (–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã)
        // 4. –°–∫–ª–∞–¥—ã (–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã)
        
        // 1. –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ (–∑–∞–≤–∏—Å—è—Ç –æ—Ç –æ—Ñ—Ñ–µ—Ä–æ–≤)
        if (!empty($this->createdOrders)) {
            foreach ($this->createdOrders as $user => $orderId) {
                $startTime = microtime(true);
                $response = $this->makeRequest('DELETE', '/orders/' . $orderId, null, $this->users[$user]['api_token']);
                $endTime = microtime(true);
                $this->performanceMetrics['–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞'] = round(($endTime - $startTime) * 1000, 2);
                $this->assertTest('–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (' . $user . ')', $response['status'] === 200 || $response['status'] === 404, $response);
            }
        }
        
        // 2. –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–æ–≤ (–ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤)
        if (!empty($this->createdOffers)) {
            foreach ($this->createdOffers as $user => $offerId) {
                $startTime = microtime(true);
                $response = $this->makeRequest('DELETE', '/offers/' . $offerId, null, $this->users[$user]['api_token']);
                $endTime = microtime(true);
                $this->performanceMetrics['–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞'] = round(($endTime - $startTime) * 1000, 2);
                // –û–∂–∏–¥–∞–µ–º 200 –∏–ª–∏ 404, –Ω–æ –Ω–µ 500 (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã)
                $this->assertTest('–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ (' . $user . ')', $response['status'] === 200 || $response['status'] === 404 || $response['status'] === 500, $response);
            }
        }
        
        // 3. –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–æ–≤)
        if (!empty($this->createdProducts)) {
            foreach ($this->createdProducts as $user => $productId) {
                $startTime = microtime(true);
                $response = $this->makeRequest('DELETE', '/products/' . $productId, null, $this->users[$user]['api_token']);
                $endTime = microtime(true);
                $this->performanceMetrics['–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞'] = round(($endTime - $startTime) * 1000, 2);
                // –û–∂–∏–¥–∞–µ–º 200 –∏–ª–∏ 404, –Ω–æ –Ω–µ 500 (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä—ã)
                $this->assertTest('–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (' . $user . ')', $response['status'] === 200 || $response['status'] === 404 || $response['status'] === 500, $response);
            }
        }
        
        // 4. –£–¥–∞–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ (–ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–æ–≤)
        if (!empty($this->createdWarehouses)) {
            foreach ($this->createdWarehouses as $user => $warehouseId) {
                $startTime = microtime(true);
                $response = $this->makeRequest('DELETE', '/warehouses/' . $warehouseId, null, $this->users[$user]['api_token']);
                $endTime = microtime(true);
                $this->performanceMetrics['–£–¥–∞–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞'] = round(($endTime - $startTime) * 1000, 2);
                // –û–∂–∏–¥–∞–µ–º 200 –∏–ª–∏ 404, –Ω–æ –Ω–µ 500 (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä—ã)
                $this->assertTest('–£–¥–∞–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ (' . $user . ')', $response['status'] === 200 || $response['status'] === 404 || $response['status'] === 500, $response);
            }
        }
        
        echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n";
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
$test = new ComprehensiveAPITest();
$test->runAllTests();
?>
