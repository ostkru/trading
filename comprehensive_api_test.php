<?php
/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –º—É–ª—å—Ç–∏—Ç–µ—Å—Ç API PortalData
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –º–µ—Ç–æ–¥—ã —Å —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
 */

class ComprehensiveAPITest {
    private $baseUrl = 'http://localhost:8095/api/v1';
    private $users = [
        'user1' => [
            'name' => 'clear13808',
            'api_token' => '80479fe392866b79e55c1640c107ee96c6aa25b7f8acf627a5ef226a5d8d1a27'
        ],
        'user2' => [
            'name' => 'veriy47043', 
            'api_token' => 'f9c912b6989eb166ee48ec6d8f07a2b0d29d5efc8ae1c2e44fac9fe8c4d4a0b5'
        ],
        'user3' => [
            'name' => '5ij48m4gcm',
            'api_token' => '00601582c3163466e0fece95d8e2315cb1c66814066ad8e0566d2813614d9001'
        ]
    ];
    
    private $testResults = [];
    private $createdProducts = [];
    private $createdOffers = [];
    private $createdOrders = [];
    private $createdWarehouses = [];

    public function runAllTests() {
        echo "üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API\n";
        echo "==========================================\n\n";

        // 1. –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        $this->testBasicEndpoints();
        
        // 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        $this->testProducts();
        
        // 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤
        $this->testWarehouses();
        
        // 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        $this->testOffers();
        
        // 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
        $this->testOrders();
        
        // 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
        $this->testPublicRoutes();
        
        // 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        $this->testErrorScenarios();
        
        // 8. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        $this->testSecurityScenarios();
        
        // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        $this->printResults();
    }

    private function testBasicEndpoints() {
        echo "üìã 1. –ë–ê–ó–û–í–´–ï –ü–†–û–í–ï–†–ö–ò\n";
        echo "------------------------\n";
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ endpoint
        $response = $this->makeRequest('GET', '/', null, null);
        $this->assertTest('–û—Å–Ω–æ–≤–Ω–æ–π endpoint', $response['status'] === 200, $response);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
        $response = $this->makeRequest('GET', '/products', null, $this->users['user1']['api_token']);
        $this->assertTest('API –¥–æ—Å—Ç—É–ø–µ–Ω', $response['status'] === 200, $response);
        
        echo "\n";
    }

    private function testProducts() {
        echo "üì¶ 2. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–î–£–ö–¢–û–í\n";
        echo "------------------------------\n";
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º 1
        $productData = [
            'name' => '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç User1',
            'vendor_article' => 'TEST-USER1-001',
            'recommend_price' => 150.50,
            'brand' => 'TestBrand',
            'category' => 'TestCategory',
            'description' => '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ—Ç User1'
        ];
        
        $response = $this->makeRequest('POST', '/products', $productData, $this->users['user1']['api_token']);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ User1', $response['status'] === 201, $response);
        if ($response['status'] === 201) {
            $this->createdProducts['user1'] = $response['data']['id'];
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º 2
        $productData = [
            'name' => '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç User2',
            'vendor_article' => 'TEST-USER2-001',
            'recommend_price' => 200.00,
            'brand' => 'User2Brand',
            'category' => 'User2Category',
            'description' => '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ—Ç User2'
        ];
        
        $response = $this->makeRequest('POST', '/products', $productData, $this->users['user2']['api_token']);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ User2', $response['status'] === 201, $response);
        if ($response['status'] === 201) {
            $this->createdProducts['user2'] = $response['data']['id'];
        }
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        $response = $this->makeRequest('GET', '/products', null, $this->users['user1']['api_token']);
        $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤', $response['status'] === 200, $response);
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
        if (isset($this->createdProducts['user1'])) {
            $response = $this->makeRequest('GET', '/products/' . $this->createdProducts['user1'], null, $this->users['user1']['api_token']);
            $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞', $response['status'] === 200, $response);
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
        if (isset($this->createdProducts['user1'])) {
            $updateData = [
                'name' => '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç User1',
                'recommend_price' => 175.00
            ];
            $response = $this->makeRequest('PUT', '/products/' . $this->createdProducts['user1'], $updateData, $this->users['user1']['api_token']);
            $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞', $response['status'] === 200, $response);
        }
        
        // Batch —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        $batchData = [
            'products' => [
                [
                    'name' => 'Batch Product 1',
                    'vendor_article' => 'BATCH-001',
                    'recommend_price' => 100.00,
                    'brand' => 'BatchBrand',
                    'category' => 'BatchCategory',
                    'description' => '–ü–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –∏–∑ batch'
                ],
                [
                    'name' => 'Batch Product 2',
                    'vendor_article' => 'BATCH-002',
                    'recommend_price' => 150.00,
                    'brand' => 'BatchBrand',
                    'category' => 'BatchCategory',
                    'description' => '–í—Ç–æ—Ä–æ–π –ø—Ä–æ–¥—É–∫—Ç –∏–∑ batch'
                ]
            ]
        ];
        
        $response = $this->makeRequest('POST', '/products/batch', $batchData, $this->users['user1']['api_token']);
        $this->assertTest('Batch —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤', $response['status'] === 201, $response);
        
        echo "\n";
    }

    private function testWarehouses() {
        echo "üè≠ 3. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ö–õ–ê–î–û–í\n";
        echo "----------------------------\n";
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º 1
        $warehouseData = [
            'name' => '–°–∫–ª–∞–¥ User1',
            'address' => '–ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 1',
            'latitude' => 55.7558,
            'longitude' => 37.6176,
            'working_hours' => '09:00-18:00'
        ];
        
        $response = $this->makeRequest('POST', '/warehouses', $warehouseData, $this->users['user1']['api_token']);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ User1', $response['status'] === 201, $response);
        if ($response['status'] === 201) {
            $this->createdWarehouses['user1'] = $response['data']['id'];
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º 2
        $warehouseData = [
            'name' => '–°–∫–ª–∞–¥ User2',
            'address' => '–°–ü–±, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 2',
            'latitude' => 59.9311,
            'longitude' => 30.3609,
            'working_hours' => '10:00-19:00'
        ];
        
        $response = $this->makeRequest('POST', '/warehouses', $warehouseData, $this->users['user2']['api_token']);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ User2', $response['status'] === 201, $response);
        if ($response['status'] === 201) {
            $this->createdWarehouses['user2'] = $response['data']['id'];
        }
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤
        $response = $this->makeRequest('GET', '/warehouses', null, $this->users['user1']['api_token']);
        $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤', $response['status'] === 200, $response);
        
        echo "\n";
    }

    private function testOffers() {
        echo "üí∞ 4. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ô\n";
        echo "--------------------------------\n";
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º 1
        if (isset($this->createdProducts['user1']) && isset($this->createdWarehouses['user1'])) {
            $offerData = [
                'product_id' => $this->createdProducts['user1'],
                'offer_type' => 'sale',
                'price_per_unit' => 180.00,
                'available_lots' => 10,
                'tax_nds' => 20,
                'units_per_lot' => 1,
                'warehouse_id' => $this->createdWarehouses['user1'],
                'is_public' => true,
                'max_shipping_days' => 5
            ];
            
            $response = $this->makeRequest('POST', '/offers', $offerData, $this->users['user1']['api_token']);
            $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è User1', $response['status'] === 201, $response);
            if ($response['status'] === 201) {
                $this->createdOffers['user1'] = $response['data']['offer_id'];
            }
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º 2
        if (isset($this->createdProducts['user2']) && isset($this->createdWarehouses['user2'])) {
            $offerData = [
                'product_id' => $this->createdProducts['user2'],
                'offer_type' => 'sale',
                'price_per_unit' => 250.00,
                'available_lots' => 5,
                'tax_nds' => 20,
                'units_per_lot' => 1,
                'warehouse_id' => $this->createdWarehouses['user2'],
                'is_public' => false,
                'max_shipping_days' => 3
            ];
            
            $response = $this->makeRequest('POST', '/offers', $offerData, $this->users['user2']['api_token']);
            $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è User2', $response['status'] === 201, $response);
            if ($response['status'] === 201) {
                $this->createdOffers['user2'] = $response['data']['offer_id'];
            }
        }
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $response = $this->makeRequest('GET', '/offers', null, $this->users['user1']['api_token']);
        $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π', $response['status'] === 200, $response);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if (isset($this->createdOffers['user1'])) {
            $updateData = [
                'price_per_unit' => 190.00,
                'available_lots' => 8
            ];
            $response = $this->makeRequest('PUT', '/offers/' . $this->createdOffers['user1'], $updateData, $this->users['user1']['api_token']);
            $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', $response['status'] === 200, $response);
        }
        
        echo "\n";
    }

    private function testOrders() {
        echo "üìã 5. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–ö–ê–ó–û–í\n";
        echo "-----------------------------\n";
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º 2 –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1
        if (isset($this->createdOffers['user1'])) {
            $orderData = [
                'offer_id' => $this->createdOffers['user1'],
                'quantity' => 2
            ];
            
            $response = $this->makeRequest('POST', '/orders', $orderData, $this->users['user2']['api_token']);
            $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ User2 –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ User1', $response['status'] === 201, $response);
            if ($response['status'] === 201) {
                $this->createdOrders['user2_on_user1'] = $response['data']['order_id'];
            }
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º 3 –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1
        if (isset($this->createdOffers['user1'])) {
            $orderData = [
                'offer_id' => $this->createdOffers['user1'],
                'quantity' => 1
            ];
            
            $response = $this->makeRequest('POST', '/orders', $orderData, $this->users['user3']['api_token']);
            $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ User3 –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ User1', $response['status'] === 201, $response);
            if ($response['status'] === 201) {
                $this->createdOrders['user3_on_user1'] = $response['data']['order_id'];
            }
        }
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        if (isset($this->createdOrders['user2_on_user1'])) {
            $response = $this->makeRequest('GET', '/orders/' . $this->createdOrders['user2_on_user1'], null, $this->users['user2']['api_token']);
            $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞', $response['status'] === 200, $response);
        }
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
        $response = $this->makeRequest('GET', '/orders', null, $this->users['user2']['api_token']);
        $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤', $response['status'] === 200, $response);
        
        echo "\n";
    }

    private function testPublicRoutes() {
        echo "üåê 6. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–£–ë–õ–ò–ß–ù–´–• –ú–ê–†–®–†–£–¢–û–í\n";
        echo "----------------------------------------\n";
        
        // –ü—É–±–ª–∏—á–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        $response = $this->makeRequest('GET', '/offers/public', null, null);
        $this->assertTest('–ü—É–±–ª–∏—á–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', $response['status'] === 200, $response);
        
        echo "\n";
    }

    private function testErrorScenarios() {
        echo "‚ùå 7. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–®–ò–ë–û–ö –ò –í–ê–õ–ò–î–ê–¶–ò–ò\n";
        echo "----------------------------------------\n";
        
        // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        $productData = ['name' => 'Test Product'];
        $response = $this->makeRequest('POST', '/products', $productData, null);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 401)', $response['status'] === 401, $response);
        
        // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        $productData = ['name' => '']; // –ü—É—Å—Ç–æ–µ –∏–º—è
        $response = $this->makeRequest('POST', '/products', $productData, $this->users['user1']['api_token']);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø—É—Å—Ç—ã–º –∏–º–µ–Ω–µ–º', $response['status'] === 400, $response);
        
        // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
        $response = $this->makeRequest('GET', '/products/99999', null, $this->users['user1']['api_token']);
        $this->assertTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞', $response['status'] === 404, $response);
        
        // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        if (isset($this->createdOffers['user1'])) {
            $orderData = [
                'offer_id' => $this->createdOffers['user1'],
                'quantity' => 1
            ];
            $response = $this->makeRequest('POST', '/orders', $orderData, $this->users['user1']['api_token']);
            $this->assertTest('–ó–∞–∫–∞–∑ –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)', $response['status'] === 400, $response);
        }
        
        // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        $orderData = ['offer_id' => 0, 'quantity' => 0];
        $response = $this->makeRequest('POST', '/orders', $orderData, $this->users['user1']['api_token']);
        $this->assertTest('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏', $response['status'] === 400, $response);
        
        // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ –±–æ–ª—å—à–µ –ª–æ—Ç–æ–≤, —á–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ
        if (isset($this->createdOffers['user1'])) {
            $orderData = [
                'offer_id' => $this->createdOffers['user1'],
                'quantity' => 999 // –û—á–µ–Ω—å –º–Ω–æ–≥–æ
            ];
            $response = $this->makeRequest('POST', '/orders', $orderData, $this->users['user2']['api_token']);
            $this->assertTest('–ó–∞–∫–∞–∑ –±–æ–ª—å—à–µ –ª–æ—Ç–æ–≤, —á–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ', $response['status'] === 400, $response);
        }
        
        echo "\n";
    }

    private function testSecurityScenarios() {
        echo "üîí 8. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò\n";
        echo "----------------------------------\n";
        
        // –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á—É–∂–∏–º –¥–∞–Ω–Ω—ã–º
        if (isset($this->createdProducts['user1'])) {
            $response = $this->makeRequest('GET', '/products/' . $this->createdProducts['user1'], null, $this->users['user2']['api_token']);
            $this->assertTest('–î–æ—Å—Ç—É–ø –∫ —á—É–∂–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è)', $response['status'] === 200, $response);
        }
        
        // –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á—É–∂–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
        if (isset($this->createdProducts['user1'])) {
            $updateData = ['name' => '–í–∑–ª–æ–º–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç'];
            $response = $this->makeRequest('PUT', '/products/' . $this->createdProducts['user1'], $updateData, $this->users['user2']['api_token']);
            $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)', $response['status'] === 403, $response);
        }
        
        // –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á—É–∂–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
        if (isset($this->createdProducts['user1'])) {
            $response = $this->makeRequest('DELETE', '/products/' . $this->createdProducts['user1'], null, $this->users['user2']['api_token']);
            $this->assertTest('–£–¥–∞–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)', $response['status'] === 403, $response);
        }
        
        // –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á—É–∂–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if (isset($this->createdOffers['user1'])) {
            $updateData = ['price_per_unit' => 999.99];
            $response = $this->makeRequest('PUT', '/offers/' . $this->createdOffers['user1'], $updateData, $this->users['user2']['api_token']);
            $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)', $response['status'] === 403, $response);
        }
        
        // –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á—É–∂–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if (isset($this->createdOffers['user1'])) {
            $response = $this->makeRequest('DELETE', '/offers/' . $this->createdOffers['user1'], null, $this->users['user2']['api_token']);
            $this->assertTest('–£–¥–∞–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)', $response['status'] === 403, $response);
        }
        
        // –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á—É–∂–æ–≥–æ —Å–∫–ª–∞–¥–∞
        if (isset($this->createdWarehouses['user1'])) {
            $updateData = ['name' => '–í–∑–ª–æ–º–∞–Ω–Ω—ã–π —Å–∫–ª–∞–¥'];
            $response = $this->makeRequest('PUT', '/warehouses/' . $this->createdWarehouses['user1'], $updateData, $this->users['user2']['api_token']);
            $this->assertTest('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ —Å–∫–ª–∞–¥–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)', $response['status'] === 403, $response);
        }
        
        // –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á—É–∂–æ–≥–æ —Å–∫–ª–∞–¥–∞
        if (isset($this->createdWarehouses['user1'])) {
            $response = $this->makeRequest('DELETE', '/warehouses/' . $this->createdWarehouses['user1'], null, $this->users['user2']['api_token']);
            $this->assertTest('–£–¥–∞–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ —Å–∫–ª–∞–¥–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ)', $response['status'] === 403, $response);
        }
        
        // –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º API –∫–ª—é—á–æ–º
        $response = $this->makeRequest('GET', '/products', null, 'invalid_api_key');
        $this->assertTest('–î–æ—Å—Ç—É–ø —Å –Ω–µ–≤–µ—Ä–Ω—ã–º API –∫–ª—é—á–æ–º', $response['status'] === 401, $response);
        
        echo "\n";
    }

    private function makeRequest($method, $endpoint, $data = null, $apiToken = null) {
        $url = $this->baseUrl . $endpoint;
        
        $headers = ['Content-Type: application/json'];
        if ($apiToken) {
            $headers[] = 'Authorization: Bearer ' . $apiToken;
        }
        
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        
        if ($data && in_array($method, ['POST', 'PUT'])) {
            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
        }
        
        $response = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);
        
        return [
            'status' => $httpCode,
            'data' => json_decode($response, true),
            'raw' => $response
        ];
    }

    private function assertTest($testName, $condition, $response) {
        $status = $condition ? '‚úÖ –ü–†–û–ô–î–ï–ù' : '‚ùå –ü–†–û–í–ê–õ–ï–ù';
        echo sprintf("%-60s %s\n", $testName, $status);
        
        if (!$condition) {
            echo "   –û—à–∏–±–∫–∞: " . ($response['data']['error'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') . "\n";
        }
        
        $this->testResults[] = [
            'name' => $testName,
            'passed' => $condition,
            'response' => $response
        ];
    }

    private function printResults() {
        echo "üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø\n";
        echo "============================\n";
        
        $passed = 0;
        $total = count($this->testResults);
        
        foreach ($this->testResults as $result) {
            if ($result['passed']) {
                $passed++;
            }
        }
        
        echo "–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: $total\n";
        echo "–ü—Ä–æ–π–¥–µ–Ω–æ: $passed\n";
        echo "–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: " . ($total - $passed) . "\n";
        echo "–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: " . round(($passed / $total) * 100, 2) . "%\n\n";
        
        if ($passed === $total) {
            echo "üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!\n";
        } else {
            echo "‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´\n";
        }
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
$test = new ComprehensiveAPITest();
$test->runAllTests();
?> 